#+PROPERTY: header-args:emacs-lisp :results silent :tangle ./init.el
#+startup: contents
#+auto_tangle: t

* Startup
** Startup Performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp
(setq debug-on-error t)
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))
;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

** Package Management 
Install =emacs-use-package= from Guix

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;; ;; Initialize package sources
;; (require 'package)
;; (setq package-archives '(("org" . "https://orgmode.org/elpa/")
;;                          ("melpa" . "https://melpa.org/packages/")

;;                          ;;("melpa-stable" . "https://stable.melpa.org/packages/")
;;                          ;; org-contrib
;;                          ("gnu" . "https://elpa.gnu.org/packages/")
;;                          ("nongnu" . "https://elpa.nongnu.org/nongnu/")))


;; (add-to-list 'load-path "~/.emacs.d/manual/")
;; ;;(add-to-list 'load-path "~/.emacs.d/straight/build/")
;; ;; Initializes the package infrastructure
;; ;; (package-initialize)

;; ;; to prevent package.el loading packages prior to their init-file loading.
(setq package-enable-at-startup nil)
;; ;; (setq package-enable-at-startup t)
#+end_src

** elpaca
To install Elpaca, add the following elisp to your init.el.
It must come before any calls to other Elpaca functions/macros.
This will clone Elpaca into your user-emacs-directory under the elpaca
subdirectory.
It then builds and activates Elpaca.

To update things like Melpa do =M-x elpaca-update-menus=

#+begin_src  emacs-lisp
;;(setq elpaca--core-date "20230730")
#+end_src

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.10)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

#+begin_src emacs-lisp
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  ;; (use-package evil :demand t)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

#+begin_src emacs-lisp
  ;; Melpulls implements an Elpaca menu for outstanding MELPA pull
  ;; requests. This makes it easy for Elpaca users to view, install, and
  ;; contribute to those packages.
  (elpaca-queue (elpaca '(melpulls :host github :repo "progfolio/melpulls")
                  (add-to-list 'elpaca-menu-functions #'melpulls)))
#+end_src

** Operating system and distribution
*** exec-path-from-shell
https://github.com/purcell/exec-path-from-shell

A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

- Motivation ::
  Ever find that a command works in your shell, but not in Emacs?
  
  This happens a lot on OS X, where an Emacs instance launched as a GUI app inherits a default minimal set of environment variables that are probably not the ones you see in a terminal window.

  Similarly, if you start Emacs as a daemon from systemd or launchd, it will run with a default set of environment variables.
  
  This library solves this problem by copying important environment variables from the user's shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.

#+begin_src emacs-lisp :lexical no
(use-package exec-path-from-shell
  ;; elpaca waits until this use-package block
  ;; has finished evaluation
  ;; i.e. eager evaluation in contrast to elpaca's lazier version
  :ensure (:wait t)
  :config
  (setq exec-path-from-shell-variables '("PATH" "MANPATH"
                                         "GEMINI_API_KEY" "OPENAI_API_KEY"))
  (when (or (memq window-system '(mac ns x))
            (daemonp))
    (exec-path-from-shell-initialize)))
#+end_src

*** Guix
**** Basic
#+begin_src emacs-lisp :lexical no
(defvar guix? (executable-find "guix")
  "Boolean to check if guix exists on current system")

(when guix?
  (defvar guix-profile-path (or (getenv "GUIX_PROFILE")
			        (concat (getenv "HOME")
				        "/.guix-profile"))
    "Value of environment variable $GUIX_PROFILE.")

  (defvar guix-checkout-path (or (getenv "GUIX_CHECKOUT")
                                 (concat (getenv "HOME")
                                         "/src/guix"))
    "Value of environment variable $GUIX_CHECKOUT, i.e. the location
of checked out guix repo https://git.savannah.gnu.org/git/guix.git.
See https://guix.gnu.org/cookbook/en/html_node/Direct-checkout-hacking.html")

  ;; The below code can also be used to add newly installed guix emacs
  ;; packages to the load-path
  (let ((default-directory (concat guix-profile-path
                                   "/share/emacs/site-lisp/")))
    (normal-top-level-add-subdirs-to-load-path)))

#+end_src

**** emacs-guix
See https://github.com/alezost/guix.el
=guix install emacs-guix=

#+begin_src emacs-lisp
(when guix?
  (require 'guix)
  (guix-emacs-autoload-packages))
#+end_src

** COMMENT use-package

#+begin_src emacs-lisp
  ;; If there are no archived package contents, refresh them
  (unless package-archive-contents
    (package-refresh-contents))


  ;; Uncomment this to get a reading on packages that get loaded at startup
  ;;(setq use-package-verbose t)

  ;; use-package
  ;; This is only needed once, near the top of the file
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

#+end_src

#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe)) 
#+end_src

** Native Compilation
   
#+begin_src emacs-lisp
;; Silence compiler warnings as they can be pretty disruptive
(setq comp-async-report-warnings-errors nil)
(setq warning-suppress-types '((comp) (:warning)))
;; (setq comp-deferred-compilation-deny-list (list "jupyter" "zmq"))
;; (setq native-comp-deferred-compilation-deny-list (list "jupyter" "zmq"))
;; (setq native-comp-bootstrap-deny-list (list "jupyter" "zmq"))


#+END_src
   
** Keep emacs.d clean

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :after (recentf undo-tree)
  :config
  ;; don't save backups, undo-tree meta-data in the same directory as
  ;; the original file
  (no-littering-theme-backups)
  ;; If you use recentf then you might find it convenient to exclude
  ;; all of the files in the no-littering directories using something
  ;; like the following.
  (add-to-list 'recentf-exclude
               (recentf-expand-file-name no-littering-var-directory))
  (add-to-list 'recentf-exclude
               (recentf-expand-file-name no-littering-etc-directory)))

;; Keep customization settings in a temporary file
(setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

#+end_src
   
** Default coding system

#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
  (set-language-environment "UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")

  (setq initial-major-mode 'org-mode)
#+end_src
   
** COMMENT Server mode

#+begin_src emacs-lisp
  (server-start)
#+end_src
   
** Performance tweaks

#+begin_src emacs-lisp
  ;; Emacs to fully redraw the display before it processes queued input events. 
  (setq redisplay-dont-pause t)
#+end_src
   
* Appearance
** Basic

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(display-battery-mode 1)
;; time
(setq display-time-format "%H:%M")
(setq display-time-default-load-average nil)
(setq display-time-24hr-format t)
(display-time-mode -1)

(column-number-mode 1)

(setq-default fill-column 80)

#+end_src

** Font
*** Basic

Use [[https://github.com/getnf/getnf?ref=linuxtldr.com][getnf]] to install Nerd Fonts (then do =fc-cache -fv= to force refresh), then launch a new Emacs.
Using 'getnf' install the following fonts:
- FiraCode - v3.3.0
- FiraMono - v3.3.0
- Hack - v3.3.0
- NerdFontsSymbolsOnly - v3.3.0

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 138)
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "FiraCode Nerd Font"
                      :weight 'regular
                      :height 140)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      ;; :font "Cantarell"
                      :font "DejaVu Sans Mono"
                      :height 140
                      :weight 'regular)
#+end_src

*** Unicode support
https://github.com/rolandwalker/unicode-fonts

#+begin_src emacs-lisp
  (use-package unicode-fonts
    :config
    (unicode-fonts-setup))
#+end_src
    
*** emojify
[[https://github.com/iqbalansari/emacs-emojify]]

Install emoji, emojione, openemoji, using =M-x emojify-download-emoji=

#+begin_src emacs-lisp
(use-package emojify
  :bind ("C-M-e" . emojify-insert-emoji)
  :config
  (setq company-emojify-emoji-styles '(ascii unicode github)
        emojify-emoji-styles '(ascii github)
        emojify-emoji-set "emojione-v2-22")
  (global-emojify-mode))
#+end_src
    
*** COMMENT company-emojify
https://github.com/jcs-elpa/company-emojify/tree/4889398d525aca1971f9a5e213759d557ceb4f1c

#+begin_src emacs-lisp 
  (use-package company-emojify
    :after company
    :config
    (add-to-list 'company-backends 'company-emojify))

#+end_src
    
** Modeline
https://github.com/seagle0128/doom-modeline

[[file:elpaca/repos/doom-modeline/doom-modeline.el::doom-modeline-def-modeline 'pdf][custom modeline]]
For icons in doom-modeline do ~M-x nerd-icons-install-fonts~
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-bar-width 5
        ;; small scroll-bar like in the bar
        doom-modeline-hud t)
  (setq-default doom-modeline--pdf-pages t)

  ;; to get eyebrowse window number in pdf-view mode (=workspace-name= segment)
  (doom-modeline-def-modeline 'my-custom-modeline
    '(bar window-number workspace-name matches debug buffer-info pdf-pages)
    '(misc-info major-mode process vcs))
  (doom-modeline-def-modeline 'pdf
    '(bar window-number workspace-name modals matches buffer-info pdf-pages)
    '(compilation misc-info major-mode process vcs time))
  (doom-modeline-def-modeline 'dashboard
    '(bar window-number workspace-name modals buffer-default-directory-simple remote-host)
    '(compilation misc-info battery irc mu4e gnus github debug minor-modes input-method major-mode process time))

  ;; Set default mode-line
  (add-hook 'doom-modeline-mode-hook
            (lambda ()
              (doom-modeline-set-modeline 'my-custom-line 'default))))
#+end_src
   
** Theme
*** modus-theme

#+begin_src emacs-lisp
  (use-package modus-themes
    :demand t
    :bind (("<f12>" . modus-themes-toggle))
    :config
    (setq modus-themes-bold-constructs t
          modus-themes-slanted-constructs t
          modus-themes-syntax '(alt-syntax)
          modus-themes-hl-line '(accented intense)
          modus-themes-intense-hl-line t
          modus-themes-links '(faint)
          modus-themes-paren-match '(bold intense)
          modus-themes-org-blocks 'gray-background
          modus-themes-region '(accented)
          modus-themes-variable-pitch-heading nil
          modus-themes-variable-pitch-ui nil
          modus-themes-mode-line nil
          modus-themes-completions '((matches . (extrabold intense))
                                     (selection . (extrabold intense))
                                     (popup . (extrabold intense))))
    (modus-themes-load-theme 'modus-vivendi))

  (with-eval-after-load 'org
    (setq org-src-block-faces
          '(("emacs-lisp" modus-themes-nuanced-magenta)
            ("elisp" modus-themes-nuanced-magenta)
            ("clojure" modus-themes-nuanced-magenta)
            ("clojurescript" modus-themes-nuanced-magenta)
            ;; lisp
            ("lisp" modus-themes-nuanced-magenta)
            ("c" modus-themes-nuanced-blue)
            ("c++" modus-themes-nuanced-blue)
            ("sh" modus-themes-nuanced-green)
            ("shell" modus-themes-nuanced-green)
            ("html" modus-themes-nuanced-yellow)
            ("xml" modus-themes-nuanced-yellow)
            ("css" modus-themes-nuanced-red)
            ("scss" modus-themes-nuanced-red)
            ("python" modus-themes-nuanced-green)
            ("ipython" modus-themes-nuanced-magenta)
            ("r" modus-themes-nuanced-cyan)
            ;; julia
            ("julia" modus-themes-nuanced-magenta)
            ("jupyter-julia" modus-themes-nuanced-magenta)
            ("yaml" modus-themes-nuanced-cyan)
            ("conf" modus-themes-nuanced-cyan)
            ;; ("docker" modus-themes-nuanced-cyan)
            )))
#+end_src

*** COMMENT doom-themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    (setq doom-one-brighter-modeline t
          doom-one-brighter-comments t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

#+RESULTS:
: t
   
** Text Management
*** Basic

#+begin_src emacs-lisp
(global-prettify-symbols-mode -1) ;; lambda -> λ

(global-font-lock-mode 1)

;; highlight current line
;; lin-mode
;; https://protesilaos.com/emacs/lin
(global-hl-line-mode 1)
(use-package lin
  :config
  (lin-global-mode 1))

;; Spaces instead of tabs.
(setq-default indent-tabs-mode nil)

;; insert  "" () etc in pairs
(add-hook 'prog-mode-hook 'electric-pair-local-mode)
;;(add-hook 'prog-mode-hook 'linum-mode)

;;(electric-pair-mode -1)

;; highlight matching parenthesis
(show-paren-mode 1)

;; selected text is overwritten by the text we type
(delete-selection-mode 1)

;; Cycle spaces
(global-set-key (kbd "M-SPC") 'cycle-spacing)

(global-set-key (kbd "C-x C-f") 'find-file-at-point)

;; Use hippie instead of dabbrev
(global-set-key [remap dabbrev-expand] 'hippie-expand)

#+end_src

*** COMMENT face-remap+

#+begin_src emacs-lisp
(use-package face-remap+)
#+end_src

*** smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :hook ((org-mode . smartparens-mode))
  :config
  (sp-local-pair 'org-mode "\\[" "\\]" :trigger "\\[")
  (sp-local-pair 'org-mode "\\(" "\\)" :trigger "\\(")
  (sp-local-pair 'org-mode "\\(" "\\)" :trigger "mm")
  )

#+end_src

*** expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)))
#+end_src

*** rainbow-delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** aggressive-indent
https://github.com/Malabarba/aggressive-indent-mode

Keeps code indented . (always)

#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook ((emacs-lisp-mode . aggressive-indent-mode)
         (scheme-mode . aggressive-indent-mode)
         ;; (lisp-mode . aggressive-indent-mode)
         ;; (lisp-interaction-mode . aggressive-indent-mode)
         (slime-repl-mode . aggressive-indent-mode)
         (racket-mode . aggressive-indent-mode)
         (racket-repl-mode . aggressive-indent-mode))
  :config)

#+end_src

** Window mangement
*** olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :defer nil
  :hook ((org-mode . olivetti-mode)
         (Info-mode . olivetti-mode)
         (nov-mode . olivetti-mode))
  :config
  (setq-default olivetti-body-width 90))

(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Alegreya"
                           :height 164))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
#+end_src

    
*** Eyebrowse
 
#+begin_src emacs-lisp
(use-package eyebrowse
  :defer nil
  :config
  (setq eyebrowse-switch-back-and-forth t)
  (setq eyebrowse-wrap-around t)
  (setq eyebrowse-new-workspace t) ;; clean up and display the scratch buffer
  (bind-key* (kbd "M-\`") 'eyebrowse-switch-to-window-config-0)
  (bind-key* (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
  (bind-key* (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
  (bind-key* (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
  (bind-key* (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
  (bind-key* (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
  (bind-key* (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
  (bind-key* (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
  (bind-key* (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
  (bind-key* (kbd "M-9") 'eyebrowse-switch-to-window-config-9)
  (bind-key* (kbd "M-0") 'eyebrowse-switch-to-window-config)
  (eyebrowse-mode 1))
#+end_src

** nerd-icons
https://github.com/emacsmirror/nerd-icons

You can use =M-x nerd-icons-install-fonts= to install =Symbols Nerd Fonts Mono= for you.

#+begin_src emacs-lisp :lexical no
(use-package nerd-icons)
#+end_src

** all-the-icons

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+end_src

** cursor
*** Basic

#+begin_src emacs-lisp :lexical no
(setq-default cursor-in-non-selected-windows '(hbar . 5))
#+end_src

*** multiple-cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)))

#+end_src
** treemacs

#+begin_src emacs-lisp
(use-package treemacs)
#+end_src

* Completion
** company

#+begin_src emacs-lisp
(use-package company
  ;; :init
  ;; (add-hook 'after-init-hook 'global-company-mode)
  :hook ((prog-mode . company-mode)
         (org-mode . company-mode)
         (text-mode . company-mode)
         (sly-mode . company-mode)
         (jupyter-repl-mode . company-mode))
  :bind (
         :map company-mode-map
         ("C-;" . company-complete)
         :map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         ("C-d" . company-show-doc-buffer)
         ("M-." . company-show-location)
         :map company-search-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  ;; can still move cursor
  (setq company-require-match nil)
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 2))
#+end_src

** company-quickhelp
https://github.com/company-mode/company-quickhelp

#+begin_src emacs-lisp
(use-package company-quickhelp
  :hook ((company-mode . company-quickhelp-mode)))
#+end_src

** COMMENT company-fuzzy

#+begin_src emacs-lisp
(use-package company-fuzzy
  :hook (company-mod . company-fuzzy-mode)
  :config
  (setq company-fuzzy-prefix-on-top t))
#+end_src

** COMMENT helm
*** Basic
#+begin_src emacs-lisp
(use-package helm
  :bind (("C-x b" . helm-mini)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files) ;;  C-s to search in files
         ("M-y" . helm-show-kill-ring)
         ("C-c h" . helm-command-prefix)
         :map helm-map
         ("<tab>" . helm-execute-persistent-action )
         ("C-z" . helm-select-action))

  :config
  (setq    helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
           helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
           helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
           helm-ff-file-name-history-use-recentf t
           helm-echo-input-in-header-line t)

  ;; (setq helm-display-function 'helm-display-buffer-in-own-frame
  ;; helm-display-buffer-reuse-frame t
  ;; helm-use-undecorated-frame-option t)

  (setq helm-input-idle-delay                     0.01
        helm-reuse-last-window-split-state        t
        helm-always-two-windows                   t
        helm-split-window-inside-p                t
        helm-commands-using-frame                 '(completion-at-point
                                                    helm-apropos
                                                    helm-eshell-prompts helm-imenu
                                                    helm-imenu-in-all-buffers)
        helm-actions-inherit-frame-settings       t
        helm-use-frame-when-more-than-two-windows nil
        helm-use-frame-when-dedicated-window      nil
        helm-show-action-window-other-window      'left
        helm-allow-mouse                          t
        ;; C-n can move to next source.
        helm-move-to-line-cycle-in-source         nil
        helm-autoresize-max-height                60 ; it is %.
        helm-autoresize-min-height                20 ; it is %.
        helm-follow-mode-persistent               t
        helm-candidate-number-limit               500
        helm-visible-mark-prefix                  "✓")


  (helm-autoresize-mode 1)

  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t
        helm-locate-fuzzy-match     t
        helm-semantic-fuzzy-search  t
        helm-imenu-fuzzy-match      t)

  ;; helm-man-woman
  (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

  ;; helm-locate <prefix> l
  ;; helm-resume <prefix> b
  (helm-mode 1))
#+end_src

#+RESULTS:
: helm-select-action

*** helm-descbinds
#+begin_src emacs-lisp
(use-package helm-descbinds
  :config
  (helm-descbinds-mode 1))
#+end_src

*** helm-company
When the completion candidates are shown, press =<f1>= or =C-h= to display the documentation for the selected candidate, or =C-w= to see its source. Not all back-ends support this.

#+begin_src emacs-lisp
(use-package helm-company
  :after company
  :bind (:map company-mode-map
              ("C-'" . helm-company)))
#+end_src

*** helm-rg
https://github.com/cosmicexplorer/helm-rg

#+begin_src emacs-lisp
(use-package helm-rg)
#+end_src

*** COMMENT helm-dash
https://github.com/dash-docs-el/helm-dash
- This package uses =Dash= docsets inside emacs to browse documentation. 
- It doesn't require Dash app.

  You can install them with =m-x helm-dash-install-docset= for the official docsets or =m-x helm-dash-install-user-docset= for user contributed docsets (experimental).
   
#+begin_src emacs-lisp
(use-package helm-dash
  :config
  (setq helm-dash-browser-func 'eww))
#+end_src

*** helm-dired-history
https://github.com/jixiuf/helm-dired-history/tree/281523f9fc46cf00fafd670ba5cd16552a607212

someone like to reuse the current dired buffer to visit another directory, so that you just need open one dired buffer. but the bad point is ,you can’t easily go forward and back in different dired directory. helm-dired-history can remember dired directory you have visited and list them using `helm.el’.

integrating dired history feature into commands like dired-do-copy and dired-do-rename. What I think of is that when user press =C= (copy) or =R= (rename) mode, it is excellent to have an option allowing users to select a directory from the history list.

after integrated the initial-input of ~`dired’ `dired-other-window’~ and `dired-other-frame’ are changed from default-directory to empty, and the first element of history is default-directory,so you can just press `RET’ or `C-j’ to select it.

#+begin_src emacs-lisp 
  (use-package helm-dired-history
    :after dired
    :bind (:map dired-mode-map
                ("," . dired))
    :config
    (require 'savehist)
    (add-to-list 'savehist-additional-variables 'helm-dired-history-variable)
    (savehist-mode 1)

    (with-eval-after-load 'dired

      ;; if you are using ido,you'd better disable ido for dired
      ;; (define-key (cdr ido-minor-mode-map-entry) [remap dired] nil) ;in ido-setup-hook
      ))
#+end_src

*** swiper-helm

#+begin_src emacs-lisp
  (use-package swiper-helm
    :after helm
    :bind (("C-s" . swiper-helm)))
#+end_src

*** helm-swoop
Use helm swoop for active region
https://github.com/emacsorphanage/helm-swoop
#+begin_src emacs-lisp
  (defun nbl/+default/search-buffer ()
    "Conduct a text search on the current buffer.
  If a selection is active, pre-fill the prompt with it."
    (interactive)
    (call-interactively
     (if (region-active-p)
         #'helm-swoop
       #'swiper-helm)))
#+end_src

#+begin_src emacs-lisp
  (use-package helm-swoop
    :bind (("C-s" . nbl/+default/search-buffer))
    :config
    (setq helm-swoop-speed-or-color t ;; sacrifice colour for speed
          helm-swoop-use-fuzzy-match t
          ;; Save buffer when helm-multi-swoop-edit complete
          helm-multi-swoop-edit-save t
          ;; If this value is t, split window inside the current window
          helm-swoop-split-with-multiple-windows nil
          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
          helm-swoop-split-direction 'split-window-vertically
          ;; If nil, you can slightly boost invoke speed in exchange for text color
          helm-swoop-speed-or-color nil
          ;; ;; Go to the opposite side of line from the end or beginning of line
          helm-swoop-move-to-line-cycle t
          ;; Optional face for line numbers
          ;; Face name is `helm-swoop-line-number-face`
          helm-swoop-use-line-number-face t))
#+end_src

*** helm-icons
https://github.com/yyoncho/helm-icons

#+begin_src emacs-lisp
  (use-package helm-icons
    :after (helm all-the-icons)
    :config
    (setq helm-icons-provider 'treemacs)
    (helm-icons-enable))
#+end_src

*** ace-jump-helm-line
https://github.com/cute-jumper/ace-jump-helm-line/tree/master

#+begin_src emacs-lisp :lexical no
(use-package ace-jump-helm-line
  :bind (:map helm-map
              ("C-'" . ace-jump-helm-line))
  :config
  (setq ace-jump-helm-line-style 'post)
  (setq ace-jump-helm-line-idle-delay 0.5)
  ;; (ace-jump-helm-line-idle-exec-remove 'helm-mini)
  ;; (ace-jump-helm-line-idle-exec-add 'helm-company)

  ;; select
  (setq ace-jump-helm-line-default-action 'select)
  ;; (setq ace-jump-helm-line-select-key ?e)
  ;; Set the move-only and persistent keys
  (setq ace-jump-helm-line-move-only-key ?m)
  (setq ace-jump-helm-line-persistent-key ?p))
#+end_src

** swiper, ivy, counsel
https://github.com/abo-abo/swiper

#+begin_src emacs-lisp :lexical no
(use-package counsel)
#+end_src

#+begin_src emacs-lisp :lexical no
(use-package swiper
  :init
  (defun nbl/swiper ()
    ;; if some text is selected, use
    ;; that as the search string.
    (interactive)
    (if (use-region-p)
        (swiper-thing-at-point)
      (swiper)))
  :bind (("C-s" . nbl/swiper)
         ("C-M-s" . swiper-isearch)))

#+end_src

** vertico
https://github.com/minad/vertico

#+begin_src emacs-lisp :lexical no
;; The `vertico' package applies a vertical layout to the minibuffer.
;; It also pops up the minibuffer eagerly so we can see the available
;; options without further interactions.  This package is very fast
;; and "just works", though it also is highly customisable in case we
;; need to modify its behaviour.
;;
(use-package vertico
  :ensure t
  :config
  (setq vertico-cycle nil)
  (setq vertico-resize nil)
  (vertico-mode 1))
#+end_src

** marginalia
https://github.com/minad/marginalia

#+begin_src emacs-lisp :lexical no
;; The `marginalia' package provides helpful annotations next to
;; completion candidates in the minibuffer.  The information on
;; display depends on the type of content.  If it is about files, it
;; shows file permissions and the last modified date.  If it is a
;; buffer, it shows the buffer's size, major mode, and the like.
;;
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode 1))
#+end_src

** orderless

#+begin_src emacs-lisp :lexical no
;; The `orderless' package lets the minibuffer use an out-of-order
;; pattern matching algorithm.  It matches space-separated words or
;; regular expressions in any order.  In its simplest form, something
;; like "ins pac" matches `package-menu-mark-install' as well as
;; `package-install'.  This is a powerful tool because we no longer
;; need to remember exactly how something is named.
;;
;; Note that Emacs has lots of "completion styles" (pattern matching
;; algorithms), but let us keep things simple.
;;
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic)))
#+end_src

** consult
https://github.com/minad/consult

#+begin_src emacs-lisp :lexical no
;; The `consult' package provides lots of commands that are enhanced
;; variants of basic, built-in functionality.  One of the headline
;; features of `consult' is its preview facility, where it shows in
;; another Emacs window the context of what is currently matched in
;; the minibuffer.  Here I define key bindings for some commands you
;; may find useful.  The mnemonic for their prefix is "alternative
;; search" (as opposed to the basic C-s or C-r keys).
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d
(use-package consult
  :ensure t
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
         ;; Search the current buffer
         ;; ("C-s" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("C-x C-b" . consult-recent-file)
         ("C-x b" . consult-buffer))
  :config
  (setq consult-line-start-from-top nil))
#+end_src

#+begin_src emacs-lisp
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :config
  (global-set-key (kbd "C-x C-d") 'consult-dir))
#+end_src

#+begin_src emacs-lisp :lexical no
(use-package consult-company
  :config
  (define-key company-mode-map [remap completion-at-point] #'consult-company))
#+end_src

** embark

#+begin_src emacs-lisp :lexical no
;; The `embark' package lets you target the thing or context at point
;; and select an action to perform on it.  Use the `embark-act'
;; command while over something to find relevant commands.
;;
;; When inside the minibuffer, `embark' can collect/export the
;; contents to a fully fledged Emacs buffer.  The `embark-collect'
;; command retains the original behaviour of the minibuffer, meaning
;; that if you navigate over the candidate at hit RET, it will do what
;; the minibuffer would have done.  In contrast, the `embark-export'
;; command reads the metadata to figure out what category this is and
;; places them in a buffer whose major mode is specialised for that
;; type of content.  For example, when we are completing against
;; files, the export will take us to a `dired-mode' buffer; when we
;; preview the results of a grep, the export will put us in a
;; `grep-mode' buffer.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995
(use-package embark
  :ensure t
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
         ("C-c C-c" . embark-collect)
         ("C-c C-e" . embark-export)
         ("C-SPC " . embark-select))
  :config
  (setq embark-help-key "?"))

;; The `embark-consult' package is glue code to tie together `embark'
;; and `consult'.
(use-package embark-consult
  :ensure t)
#+end_src

** wgrep

#+begin_src emacs-lisp :lexical no
;; The `wgrep' packages lets us edit the results of a grep search
;; while inside a `grep-mode' buffer.  All we need is to toggle the
;; editable mode, make the changes, and then type C-c C-c to confirm
;; or C-c C-k to abort.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
(use-package wgrep
  :ensure t
  :bind ( :map grep-mode-map
          ("e" . wgrep-change-to-wgrep-mode)
          ("C-x C-q" . wgrep-change-to-wgrep-mode)
          ("C-c C-c" . wgrep-finish-edit)))
#+end_src

* Utility
** Basic

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (winner-mode 1)

  ;; Toggle automatic saving to file-visiting buffers off.
  (auto-save-visited-mode -1)
#+end_src
** Text editing
*** flycheck

#+CAPTION: To avoid arbitrary code execution in emacs
#+begin_src emacs-lisp :lexical no
;; https://eshelyaron.com/posts/2024-11-27-emacs-aritrary-code-execution-and-how-to-avoid-it.html

(with-eval-after-load 'flycheck
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (flycheck-mode -1))))

(with-eval-after-load 'flymake
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (flymake-mode -1))))

#+end_src

#+begin_src emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode -1))

;; https://github.com/flycheck/flycheck-inline
(use-package flycheck-inline
  :after flycheck
  :hook ((flycheck-mode . flycheck-inline-mode)))

;; (use-package flycheck-pos-tip
;;   :after flycheck
;;   :init
;;   (flycheck-pos-tip-mode 1))

;; (use-package flycheck-pkg-config
;;   :after flycheck
;;   :config
;; )
#+end_src

*** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :demand t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (define-key yas-minor-mode-map (kbd "<tab>") yas-maybe-expand)
  (define-key yas-minor-mode-map (kbd "TAB") yas-maybe-expand)
  ;; Bind `SPC' to `yas-expand' when snippet expansion available (it
  ;; will still call `self-insert-command' otherwise).
  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
  (add-hook 'yas-before-expand-snippet-hook (lambda () (smartparens-mode -1)))
  (add-hook 'yas-after-exit-snippet-hook (lambda () (smartparens-mode 1)))
  (yas-global-mode 1))

;; (use-package helm-c-yasnippet
;;   :after yasnippet
;;   :bind (("C-c y" . helm-yas-complete))
;;   :config
;;   (setq helm-yas-space-match-any-greedy t))
#+end_src

*** auto-activating-snippets

https://github.com/ymarco/auto-activating-snippets

#+begin_src emacs-lisp
  (use-package aas
    :hook (org-mode . aas-activate-for-major-mode)
    :config
    (aas-set-snippets 'org-mode
                      ";d" "$"
                      ;; set condition!
                      :cond #'org-inside-LaTeX-fragment-p
                      "fr" (lambda () (interactive)
                             (yas-expand-snippet "\\frac{$1}{$2} $0"))

                      "sum" (lambda () (interactive)
                              (yas-expand-snippet "\\sum_{$1}^{$2} $0"))))
#+end_src

*** COMMENT LaTeX Auto Activating Snippets
https://github.com/tecosaur/LaTeX-auto-activating-snippets


#+begin_src emacs-lisp
;; Installing 'laas' means installing ANOTHER 'auctex'
;; which leads to problems.
;; ∴ don't install it
(use-package laas
  :when (require 'auctex nil :no-error)
  :hook ((org-mode . laas-mode)
         (LaTeX-mode . laas-mode))
  :config )
#+end_src

*** undo-tree
https://github.com/apchamberlain/undo-tree.el

#+begin_src emacs-lisp 
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1))
#+end_src

*** hungry-delete
https://github.com/nflath/hungry-delete

#+begin_src emacs-lisp :lexical no
(use-package hungry-delete
  :config
  (setf hungry-delete-join-reluctantly t)
  (global-hungry-delete-mode))
#+end_src

** Keybindings
*** Basic

#+begin_src emacs-lisp
(global-set-key (kbd "C-x `") 'delete-window)
;; (global-set-key (kbd "C-1") 'delete-other-windows)
;; (global-set-key (kbd "C-2") 'split-window-below)
;; (global-set-key (kbd "C-3") 'split-window-right)

(global-set-key (kbd "s-k") 'kill-this-buffer)
(global-set-key (kbd "s-K") 'kill-buffer-and-window)
(bind-key* (kbd "C-o") 'other-window)
(define-key prog-mode-map (kbd "C-o") 'other-window)
(require 'dired)
(define-key dired-mode-map (kbd "C-o") 'other-window)
;;(define-key compilation-mode-map (kbd "C-o") 'other-window)
(global-set-key (kbd "C-g") 'keyboard-escape-quit)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;;(define-key input-decode-map [?\C-m] [C-m])

;; text scale
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C-_") 'text-scale-decrease)

;; move to current directory
(defun nbl/current-directory (prefix)
  (interactive "P")
  (if prefix
      (progn (kill-new default-directory)
             (message "Copied to kill ring: %s" default-directory))
    (dired default-directory)))
(bind-key* (kbd "<f4>") 'nbl/current-directory)
(define-key dired-mode-map (kbd "<f4>") #'dired-up-directory)
(define-key dired-mode-map (kbd "l") #'dired-up-directory)

;; enable keybindings
(put 'narrow-to-region 'disabled nil)
#+end_src

*** General
https://github.com/noctuid/general.el#about

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (general-auto-unbind-keys 1))
#+end_src

*** COMMENT key-chord
https://github.com/emacsorphanage/key-chord

#+begin_src emacs-lisp :lexical no
(use-package key-chord
  :after avy
  :config
  ;; (key-chord-define-global "fj" 'avy-goto-char-2)
  (key-chord-mode 1))
#+end_src

** Movement
*** avy
https://github.com/abo-abo/avy 

#+begin_src emacs-lisp
(use-package avy
  :demand t
  :config
  (global-set-key (kbd "<menu>") #'avy-goto-char-timer)
  (global-set-key (kbd "<XF86MenuKB>") #'avy-goto-char-timer))
#+end_src

*** ace-isearch
https://github.com/tam17aki/ace-isearch

ace-isearch.el provides a minor mode that combines isearch, ace-jump-mode or avy and helm-swoop or swiper.

The "default" behavior (ace-isearch-jump-based-on-one-char t) can be summarized as:

    L = 1 : ace-jump-mode or avy
    1 < L < 6 : isearch
    L >= 6 : helm-swoop or swiper

where L is the input string length during isearch. When L is 1, after a few seconds specified by ace-isearch-jump-delay, ace-jump-mode or avy will be invoked. Of course you can customize the above behaviour.

If (ace-isearch-jump-based-on-one-char nil), L=2 characters are required to invoke ace-jump-mode or avy after ace-isearch-jump-delay. This has the effect of doing regular isearch for L=1 and L=3 to 6, with the ability to switch to 2-character avy or ace-jump-mode (not yet supported) once ace-isearch-jump-delay has passed. Much easier to do than to write about :-)

#+begin_src emacs-lisp :lexical no
(use-package ace-isearch
  :config
  (global-ace-isearch-mode 1))
#+end_src

*** buffer-move
https://github.com/lukhas/buffer-move
This file is for lazy people wanting to swap buffers without typing C-x b on each window.

#+begin_src emacs-lisp :lexical no
(use-package buffer-move
  :config
  (bind-key* (kbd "<C-S-up>")     'buf-move-up)
  (bind-key* (kbd "<C-S-down>")   'buf-move-down)
  (bind-key* (kbd "<C-S-left>")   'buf-move-left)
  (bind-key* (kbd "<C-S-right>")  'buf-move-right))
#+end_src

** recent
*** recentf-sync
https://github.com/ffevotte/sync-recentf

This package helps synchronizing the recent files list between emacs instances. Without it, each emacs instance manages its own recent files list. The last one to close persistently saves its list into recentf-save-file; all files recently opened by other instances are overwritten.

With /sync-recentf/, all running emacs instances periodically synchronize their local recent files list with /recentf-save-file/. This ensures that all instances share the same list, which is persistently saved across sessions.

#+begin_src emacs-lisp 
(use-package sync-recentf
  :after recentf
  :config
  (setq recentf-max-saved-items 5001
        recentf-max-menu-items 100
        recentf-save-file "~/.emacs.d/recentf")
  ;; save recentf-list every 1 minutes
  ;; (run-at-time nil (* 1 60) 'recentf-save-list)
  ;; Cleanup the recent files list and synchronize it every 60 seconds.
  (setq recentf-auto-cleanup 60)
  ;; Activate recentf
  (recentf-mode 1))
#+end_src

*** recentf-ext
https://github.com/rubikitch/recentf-ext

#+begin_src emacs-lisp 
  (use-package recentf-ext)
#+end_src

*** savehist

#+begin_src emacs-lisp :lexical no
;; The built-in `savehist-mode' saves minibuffer histories.  Vertico
;; can then use that information to put recently selected options at
;; the top.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:25765797-27a5-431e-8aa4-cc890a6a913a
(savehist-mode 1)
#+end_src

** COMMENT casual
*** casual-info
https://github.com/kickingvegas/casual-info

#+begin_src emacs-lisp :lexical no
(use-package casual-info
  :bind (:map Info-mode-map ("?" . #'casual-info-tmenu))
  :config
  ;; # Info
  ;; Use web-browser history navigation bindings
  (keymap-set Info-mode-map "M-[" #'Info-history-back)
  (keymap-set Info-mode-map "M-]" #'Info-history-forward)
  ;; Bind p and n to paragraph navigation
  (keymap-set Info-mode-map "p" #'casual-info-browse-backward-paragraph)
  (keymap-set Info-mode-map "n" #'casual-info-browse-forward-paragraph)
  ;; Bind h and l to navigate to previous and next nodes
  ;; Bind j and k to navigate to next and previous references
  (keymap-set Info-mode-map "h" #'Info-prev)
  (keymap-set Info-mode-map "j" #'Info-next-reference)
  (keymap-set Info-mode-map "k" #'Info-prev-reference)
  (keymap-set Info-mode-map "l" #'Info-next)
  ;; Bind / to search
  (keymap-set Info-mode-map "/" #'Info-search)
  ;; Set Bookmark
  (keymap-set Info-mode-map "B" #'bookmark-set)
  (add-hook 'Info-mode-hook #'scroll-lock-mode))
#+end_src

*** casual-dired
https://github.com/kickingvegas/casual-dired

#+begin_src emacs-lisp :lexical no
(use-package casual-dired
  :bind (:map dired-mode-map ("?" . #'casual-dired-tmenu)))
#+end_src

** restart-emacs
https://github.com/iqbalansari/restart-emacs

It offers a command =restart-emacs= which kills current Emacs session and starts a new session.

Additional arguments to be passed to the new instance can be specified using prefix arguments

    with a single universal-argument (C-u) Emacs is restarted with /--debug-init/ flag
    with two universal-argument (C-u C-u) Emacs is restarted with /-Q/ flag
    with three universal-argument (C-u C-u C-u) the user is prompted for the arguments

=restart-emacs= can restore frames on restart, right this is experimental and disabled by default to enable it set =restart-emacs-restore-frames= to =t=.

There is also a second command =restart-emacs-start-new-emacs= which starts a new session of Emacs without killing the current one. It takes the same arguments as =restart-emacs=.

#+begin_src emacs-lisp :lexical no
(use-package restart-emacs)
#+end_src

** hydra

#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
#+end_src

** Shells
*** term

#+begin_src emacs-lisp
  (require 'term)
#+end_src

*** vterm
When you enable vterm-copy-mode, the terminal buffer behaves like a normal read-only text buffer: you can search, copy text, etc.
The default keybinding to toggle vterm-copy-mode is =C-c C-t=.
When a region is selected, it is possible to copy the text and leave vterm-copy-mode with the enter key.

[[*eterm-256color][eterm-256color]]

#+begin_src emacs-lisp
(use-package vterm
  :ensure nil ;; installed via Guix (guix install emacs-vterm)
  :config
  (bind-key* (kbd "C-<return>") 'vterm-other-window)
  (setq
   ;;vterm-shell "/bin/bash"
   vterm-kill-buffer-on-exit t
   vterm-disable-bold t
   vterm-timer-delay nil
   vterm-buffer-name-string "vterm %s"
   vterm-always-compile-module t
   vterm-max-scrollback 10000)
  (define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)
  (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq default-directory path)))))


;; (use-package vterm-toggle
;;   :config)

;; (use-package multi-vterm
;;   ::bind (("s-<return>" . multi-vterm)
;;           :map vterm-mode-map
;;           ("C-o" . other-window)))
#+end_src

*** eshell
**** eshell-syntax-highlighting
https://github.com/akreisher/eshell-syntax-highlighting/tree/master

#+begin_src emacs-lisp :lexical no
(use-package eshell-syntax-highlighting
  :after eshell-mode
  :config
  ;; Enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode +1))
#+end_src

*** eterm-256color

#+begin_src emacs-lisp
(use-package eterm-256color
  :hook ((term-mode . eterm-256color-mode)
         (vterm-mode . eterm-256color-mode))
  :config
  (setq eterm-256color-disable-bold t
        ;; https://github.com/akermu/emacs-libvterm?tab=readme-ov-file#vterm-term-environment-variable
        vterm-term-environment-variable "eterm-color"))
#+end_src

** envrc
https://github.com/purcell/envrc
envrc.el - buffer-local direnv integration for Emacs

- Regarding interaction with the mode :: see ~envrc-mode-map~, and the commands ~envrc-reload~, ~envrc-allow~ and ~envrc-deny~. (There's also ~envrc-reload-all~ as a "nuclear" reset, for now!)

- Troubleshooting ::
  If you find that a particular Emacs command isn't picking up the environment of your current buffer, and you're sure that envrc-mode is active in that buffer, then it's possible you've found code that runs a process in a temp buffer and neglects to propagate your environment to that buffer before doing so.

  A couple of common Emacs commands that suffer from this defect are also patched directly via advice in envrc.el — shell-command-to-string is a prominent example!

  The =inheritenv= package was designed to handle this case in general.

#+begin_src emacs-lisp
(use-package envrc)
(add-hook 'elpaca-after-init-hook (lambda () (envrc-global-mode 1)))
#+end_src

** Dired
*** Basic

#+begin_src emacs-lisp
(setq dired-dwim-target t ;Copy from one dired dir to the next dired dir shown in a split window
      dired-recursive-copies 'always
      dired-recursive-deletes 'always)

(define-key dired-mode-map (kbd "R") 'dired-async-do-rename)
(define-key dired-mode-map (kbd "C") 'dired-async-do-copy)

(setq dired-create-destination-dirs 'ask
      dired-create-destination-dirs-on-trailing-dirsep t)

;; Toggle omission of uninteresting files in Dired
;; The default is to omit  ‘.’, ‘..’, auto-save files and lock files.
(add-hook 'dired-mode-hook #'dired-omit-mode)

;; as with 'i' I can insert subdir, therefore I want 'I' to kill the subdir.
(define-key dired-mode-map (kbd "I") 'dired-kill-subdir)
#+end_src

*** COMMENT Dirvish
https://github.com/alexluigit/dirvish
#+begin_src emacs-lisp :lexical no
(use-package dirvish
  :config
  (dirvish-override-dired-mode t))
#+end_src

*** dired-hacks-utils

#+begin_src emacs-lisp :lexical no
  (use-package dired-hacks-utils
    :after dired
    :hook ((dired-mode . dired-utils-format-information-line-mode))
    :bind)
#+end_src

*** dired-ranger

#+begin_src emacs-lisp :lexical no
  (use-package dired-ranger
    :bind (:map dired-mode-map
                ("M-w" . dired-ranger-copy)
                ("C-y" . dired-ranger-paste)
                ("C-u C-y" . dired-ranger-move)))
#+end_src

*** COMMENT dired-recent
Replaced with consult-dir
#+begin_src emacs-lisp
  (use-package dired-recent
    :config
    (dired-recent-mode 1))
#+end_src

*** dired-open

#+begin_src emacs-lisp
  (use-package dired-open
    :bind (:map dired-mode-map
                ("J" . dired-open-xdg)))
#+end_src

*** dired-open-with
https://github.com/FrostyX/dired-open-with

#+begin_src emacs-lisp :lexical no
(use-package dired-open-with
  :bind (:map dired-mode-map
              ("C-u J" . dired-open-with)))
#+end_src

*** dired-filter

#+begin_src emacs-lisp
(use-package dired-filter
  :hook ((dired-mode . dired-filter-group-mode))
  :bind (:map dired-filter-group-mode-map
              ("<tab>" . nil)
              ("<backtab>" . nil))
  :config
  (setq dired-filter-group-saved-groups '(("default"
                                           ("PDF"
                                            (extension "pdf" "PDF"))
                                           ("LaTeX"
                                            (extension "tex" "bib"))
                                           ("Org"
                                            (extension "org" "org~"))
                                           ("Archives"
                                            (extension "zip" "rar" "gz" "bz2" "tar"))
                                           ("Media"
                                            (extension "ogg" "flv" "mpg" "avi" "mp4" "mp3" "jpg" "jpeg" "png"))
                                           ("epub"
                                            (extension "epub"))
                                           ("Spreadsheet"
                                            (extension "csv"))
                                           ("Git"
                                            (git-ignored))))))
#+end_src

*** dired-narrow

#+begin_src emacs-lisp
  (use-package dired-narrow)
#+end_src

*** dired-preview

#+begin_src emacs-lisp :lexical no
(use-package dired-preview)
#+end_src

*** diredf avfs
just install =avfsd= as system package.

AVFS is a FUSE-based filesystem that allows browsing of compressed files.
It provides the `mountavfs' command that starts a small `avfsd' daemon.
When a specially formatted path under `~/.avfs' is accessed, the daemon provides listings and content access on the fly

*** diredfl
https://github.com/purcell/diredfl

#+begin_src emacs-lisp
  (use-package diredfl
    :config
    (diredfl-global-mode))
#+end_src

*** all-the-icons-dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** dired-subtree

#+begin_src emacs-lisp
  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<backtab>" . dired-subtree-cycle))
    :config
    (setq dired-subtree-overlays t))
#+end_src

** pdf-tools

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure nil ;; installed via Guix.
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward))
  :config
  (pdf-tools-install t))
#+end_src

** pdf-view-restore

#+begin_src emacs-lisp
  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
#+end_src

** info

#+begin_src emacs-lisp :lexical no
  (require 'info)
  (when guix?
    (add-to-list 'Info-additional-directory-list
		 (concat guix-profile-path
			 "/share/info/")))
#+end_src

** telega
https://zevlg.github.io/telega.el/
From AUR, install =libtgvoip=, =libtd=
   
#+begin_src emacs-lisp
(when guix?
  ;; On guix: guix package -i emacs-telega font-gnu-{unifont,freefont}
  (require 'telega nil :no-error))
#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode 1))
#+end_src

** disk-usage
Size of directory.

#+begin_src emacs-lisp
  (use-package disk-usage)
#+end_src

** trashed
Your trash directory is most likely at:
=/home/$USER/.local/share/Trash=

#+begin_src emacs-lisp
  (use-package trashed)
  (setq delete-by-moving-to-trash t)
#+end_src

** Docker
*** docker
https://github.com/Silex/docker.el

#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :bind (("C-c d" . docker)))
#+end_src

*** COMMENT docker-tramp
https://github.com/emacs-pe/docker-tramp.el

#+begin_src emacs-lisp
  (use-package docker-tramp
    :ensure t)
#+end_src

*** docker-compose-mode
https://github.com/emacs-pe/docker-tramp.el

#+begin_src emacs-lisp
  (use-package docker-compose-mode)
#+end_src

*** dockerfile-mode
https://github.com/spotify/dockerfile-mode/tree/5db94549ce8b000ae35adf511c820ad228178052
- Adds syntax highlighting as well as the ability to build the image directly (C-c C-b) from the buffer.
- You can specify the image name in the file itself by adding a line like this at the top of your Dockerfile.
  ~## -*- dockerfile-image-name: "your-image-name-here" -*-~

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** gptel
https://github.com/karthink/gptel

#+begin_src emacs-lisp :lexical no
(use-package gptel
  :config
  ;; Register a backend
  ;; :key can be a function that returns the API key.
  (setq
   gptel-model 'gemini-2.5-pro-exp-03-25
   gptel-backend (gptel-make-gemini "Gemini"
                   :key (exec-path-from-shell-getenv "GEMINI_API_KEY")
                   :stream t
                   :models '(gemini-2.5-pro-exp-03-25
                             gemini-2.0-flash
                             gemini-pro
                             gemini-1.5-pro-latest)))
  
  ;; Together.ai offers an OpenAI compatible API
  ;; (gptel-make-openai "TogetherAI"       ;Any name you want
  ;;   :host "api.together.xyz"
  ;;   :key (gptel-api-key-from-auth-source "api.together.xyz")
  ;;   :stream t
  ;;   :models '(;; has many more, check together.ai
  ;;             "mistralai/Mixtral-8x7B-Instruct-v0.1"
  ;;             "codellama/CodeLlama-13b-Instruct-hf"
  ;;             "codellama/CodeLlama-34b-Instruct-hf"))
  (global-set-key (kbd "C-x C-l") 'gptel-send)
  (global-set-key (kbd "C-x l") 'gptel-abort))
#+end_src

** COMMENT polymode

#+begin_src emacs-lisp
(use-package poly-org
  :ensure t
  :config
  (remove-hook 'poly-org-mode (lambda () (olivetti-mode -1))))
#+end_src

** COMMENT tree-sitter

#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (global-tree-sitter-mode 1)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

** COMMENT Bufler
https://github.com/alphapapa/bufler.el/
Butler for buffers.

#+begin_src emacs-lisp
  (use-package bufler
    :config
    (bufler-mode 1))
#+end_src

** COMMENT dogears
https://github.com/alphapapa/dogears.el
/Never lose your place in Emacs again!/

This library automatically and smartly remembers where you’ve been, in and across buffers, and helps you quickly return to any of those places. It works similarly to a Web browser’s history list and back/forward commands, but with more contextual information and customization. As well, for most modes, it can return to a place even if its buffer no longer exists.

#+begin_src emacs-lisp :lexical no
(use-package dogears
  :bind (:map global-map
              ("M-g d" . dogears-go)
              ("M-g M-b" . dogears-back)
              ("M-g M-f" . dogears-forward)
              ("M-g M-d" . dogears-list)
              ("M-g M-D" . dogears-sidebar))
  :hook ((prog-mode . dogears-mode)
         (org-mode . dogears-mode)))

#+end_src
- Usage :: It works by automatically remembering (“dogearing”) the place at point when any of three things happens:
  1. The dogears idle timer runs (after 5 seconds idle, by default).
  2. One of the dogears-hooks is run (only including imenu-after-jump-hook by default).
  3. One of the functions listed in dogears-functions is called (none, by default).

Then the user can run a command to view or go to places in the list.
| Command          | Action                                                     |
|------------------+------------------------------------------------------------|
| dogears-mode     | Automatically remember places, according to configuration. |
| dogears-remember | Manually remember the place at point.                      |
| dogears-go       | Go to a dogeared place, selected with completion.          |
| dogears-back     | Go to previous dogeared place.                             |
| dogears-forward  | Go to next dogeared place.                                 |
| dogears-list     | Show dogeared places in a tabulated list buffer.           |
| dogears-sidebar  | Show Dogears list in a side window.                        |

** COMMENT projectile
*** basic
https://github.com/bbatsov/projectile

#+begin_src emacs-lisp :lexical no
(use-package projectile
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-indexing-method 'alien)
  (setq projectile-completion-system 'helm)
  (projectile-mode 1))
#+end_src

*** COMMENT helm-projectile
https://github.com/bbatsov/helm-projectile

#+begin_src emacs-lisp :lexical no
(use-package helm-projectile
  :after (helm projectile)
  :config
  (setq projectile-completion-system 'helm)
  (helm-projectile-on))
#+end_src

** session
http://emacs-session.sourceforge.net/index.html
Session restores various variables (e.g., input histories) from your last session

#+begin_src emacs-lisp
  (use-package session
    :config
    )
#+end_src

** COMMENT real-auto-save
https://github.com/chillaranand/real-auto-save
automatically save the files (you want) at regular intervals

#+begin_src emacs-lisp
  (use-package real-auto-save
    :hook ((pdf-view-mode . real-auto-save-mode)
           (org-mode . real-auto-save-mode))
    :config
    (setq real-auto-save-interval 5))
#+end_src

** COMMENT polybar
*** ini-mode

#+begin_src emacs-lisp
  (use-package ini-mode
    :mode ("\\.ini\\'" . ini-mode))
#+end_src

** COMMENT smart-compile
https://www.emacswiki.org/emacs/SmartCompile
%F  absolute pathname            ( /usr/local/bin/netscape.bin )
%f  file name without directory  ( netscape.bin )
%n  file name without extension  ( netscape )
%e  extension of file name       ( bin )

#+begin_src emacs-lisp
  (use-package smart-compile
    :bind (:map prog-mode-map
                ("<f5>" . smart-compile))
    :config
    (add-to-list 'smart-compile-alist
                 '("\\.[Cc]+[Pp]*\\'" . "g++ -g -Wall  %f -o %n")))
#+end_src

** compilation

#+begin_src emacs-lisp :lexical no
;;;; colorize output in compile buffer
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (ansi-color-apply-on-region compilation-filter-start (point)))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

;;
;;(define-key compilation-mode-map (kbd "C-o") 'other-window)
#+end_src

** COMMENT tab-line

#+begin_src emacs-lisp
  (global-tab-line-mode 1)
#+end_src

** eww

#+begin_src emacs-lisp
(require 'eww)
(setq browse-url-browser-function 'browse-url-default-browser
      ;; browse-url-browser-function 'eww-browse-url
      shr-use-colors nil
      shr-use-fonts nil)


(when (fboundp 'eww)
  (defun xah-rename-eww-buffer ()
    "Rename `eww-mode' buffer so sites open in new page.
URL `http://ergoemacs.org/emacs/emacs_eww_web_browser.html'
Version 2017-11-10"
    (let (($title (plist-get eww-data :title)))
      (when (eq major-mode 'eww-mode )
        (if $title
            (rename-buffer (concat "eww " $title ) t)
          (rename-buffer "eww" t)))))

  (add-hook 'eww-after-render-hook 'xah-rename-eww-buffer))
#+end_src

** In built emacs packages
Might need to use newer version of inbuilt emacs packages.

*** transient

#+begin_src emacs-lisp :lexical no
;; Magit needed transient to be >= 0.5.0
;; do =M-x magit-version= to know transient version
(use-package transient)
#+end_src

** git
*** magit

#+begin_src emacs-lisp 
(use-package magit
  :after nerd-icons
  :custom (magit-format-file-function #'magit-format-file-nerd-icons)
  :bind (:map magit-mode-map
	      ("M-1" . nil)
	      ("M-2" . nil)
	      ("M-3" . nil)
	      ("M-4" . nil))
  :config
  (setq magit-diff-refine-hunk t))
#+end_src

*** magit-todos
[[https://github.com/alphapapa/magit-todos]]

- To exclude certain patterns in a repo https://github.com/alphapapa/magit-todos#tips

#+begin_src emacs-lisp :lexical no
(use-package magit-todos
  :after magit
  :config
  (setq magit-todos-fontify-org nil
        magit-todos-group-by '(magit-todos-item-filename
                               magit-todos-item-keyword)
        magit-todos-scanner #'magit-todos--scan-with-git-grep)
  (setq magit-todos-exclude-globs '(".git/" "*.map"))
  (magit-todos-mode 1))
#+end_src

*** COMMENT forge

#+begin_src emacs-lisp :lexical no
(use-package forge
  :after magit
  :config
  (setq  forge-topic-list-limit '(100 . -10)))
#+end_src

*** COMMENT magit-delta

#+begin_src emacs-lisp :lexical no
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

*** diff-hl
https://github.com/dgutov/diff-hl

The package also contains auxiliary modes:

- =diff-hl-dired-mode= provides similar functionality in Dired.
- =diff-hl-margin-mode= changes the highlighting function to use the margin instead of the fringe.
- =diff-hl-amend-mode= sets the reference revision to the one before recent one. Also, you could use diff-hl-set-reference-rev to set it to any revision, see its docstring for details.
- =diff-hl-flydiff-mode= implements highlighting changes on the fly.
- =diff-hl-show-hunk-mouse-mode= makes fringe and margin react to mouse clicks to show the corresponding hunk. That's the alternative to using diff-hl-show-hunk and friends.


#+begin_src emacs-lisp :lexical no
(use-package diff-hl
  :config
  (global-diff-hl-mode 1)
  (global-diff-hl-show-hunk-mouse-mode 1)
  ;; When using Magit 2.4 or newer, add this to your init script:
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  ;; diff-hl should just work with Tramp. But slow or high latency
  ;; connections can cause performance problems. If you experience
  ;; such issues, customize diff-hl-disable-on-remote to t. This will
  ;; change the behavior of both turn-on-diff-hl-mode and
  ;; global-diff-hl-mode (whichever you prefer to use).
  (setq diff-hl-disable-on-remote t))
#+end_src


*** git-link
https://github.com/sshaw/git-link
Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.

- =git-link= returns the URL for the current buffer's file location at the current line number or active region.
- =git-link-commit= returns the URL for the commit at point.
- =git-link-homepage= returns the URL for the repository's homepage.
- URLs are added to the kill ring.

#+begin_src emacs-lisp :lexical no
(use-package git-link)
#+end_src

*** gitleaks
https://github.com/gitleaks/gitleaks

#+begin_src emacs-lisp :lexical yes
(when (not (executable-find "gitleaks"))
  (warn "gitleaks not found, install it with `go install github.com/zricethezav/gitleaks/v8@latest`"))
#+end_src

#+begin_src emacs-lisp :lexical yes
;; Gitleaks v8.19.0 command translations 
;; https://gist.github.com/zricethezav/b325bb93ebf41b9c0b0507acf12810d2

(defvar gitleaks-pre-commit-string
  "#!/bin/sh

set -xeu -o

# if gitleaks is installed, then run it else warn the user to install it
if command -v gitleaks > /dev/null 2>&1
then
    # Check if secrets are going to be leaked using 'gitleaks'
    gitleaks git --pre-commit --staged --verbose
    if [ $? -eq 126 ]; then
        echo 'Gitleaks error: Unknown flag'
    fi
else
    echo 'gitleaks is not installed.'
fi")

(defun nbl/git-insert-gitleaks-pre-commit ()
  "Insert a pre-commit hook that runs gitleaks"
  (interactive)
  (let ((git-directory (vc-root-dir)))
    (if git-directory
        ;; add contents of gitleaks-pre-commit-string
        ;; to vc-root-dir/.git/hooks/pre-commit
        (let ((pre-commit-file (concat git-directory ".git/hooks/pre-commit"))
              (continue t))
          ;; Tell that it will overwrite any pre-existing pre-commit hook and
          ;; ask for confirmation to continue
          (if (file-exists-p pre-commit-file)
              (when (not (y-or-n-p
                          (format
                           "Overwrite existing pre-commit hook at %s? "
                           pre-commit-file)))
                (setq continue nil)))
          (when continue
            (with-temp-file pre-commit-file
              (insert gitleaks-pre-commit-string))
            (chmod pre-commit-file 493) ; make it executable
            (message "gitleaks pre-commit hook added")))
      (message "No vc root directory found"))))

(defun nbl/install-gitleaks ()
  "Clone, build and install gitleaks from source on Linux.
The binary will be installed to $HOME/go/bin/gitleaks"
  (interactive)
  (let* ((temp-dir (make-temp-file "gitleaks-build-" t))
         (home-dir (getenv "HOME"))
         (go-bin-dir (expand-file-name "go/bin" home-dir))
         (default-directory temp-dir))
    
    ;; Ensure the go/bin directory exists
    (unless (file-exists-p go-bin-dir)
      (make-directory go-bin-dir t))
    
    (message "Building gitleaks in temporary directory: %s" temp-dir)
    
    (async-shell-command
     (format "git clone https://github.com/gitleaks/gitleaks.git . && \
              make build && \
              mv ./gitleaks %s && \
              trash %s && \
              echo 'gitleaks installed at %s'"
             (shell-quote-argument (expand-file-name "gitleaks" go-bin-dir))
             (shell-quote-argument temp-dir)
             (shell-quote-argument (expand-file-name "gitleaks" go-bin-dir))))))
#+end_src
** rg
https://github.com/dajva/rg.el

#+begin_src emacs-lisp :lexical no
(use-package rg
  :config
  (rg-enable-default-bindings))
#+end_src

** COMMENT weblorg

#+begin_src emacs-lisp 
  (use-package weblorg)
#+end_src

** topsy
https://github.com/alphapapa/topsy.el
Like [[*org-sticky-header]]

#+begin_src emacs-lisp
  (use-package topsy
    :hook (prog-mode . topsy-mode))
#+end_src

** COMMENT emacs-everywhere
https://github.com/tecosaur/emacs-everywhere

- To exit :: =C-x 5 0= or =C-c C-c=
  - and discard changes  :: =C-c C-k=

#+begin_src emacs-lisp 
  (use-package emacs-everywhere)
#+end_src

** json
https://github.com/DamienCassou/json-navigator/tree/afd902e0b5cde37fad4786515a695d17f1625286

#+begin_src emacs-lisp :lexical no
(use-package json-mode)

;;(use-package json-navigator)
#+end_src

** restclient
https://github.com/pashky/restclient.el

#+begin_src emacs-lisp :lexical no
(use-package restclient
  :mode (("\\.http\\'" . restclient-mode))
  :bind (:map restclient-mode-map
	      ("C-c C-f" . json-mode-beautify)))

(use-package ob-restclient
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t))))
#+end_src

** COMMENT virtual-comment
https://github.com/thanhvg/emacs-virtual-comment
A virtual comment is an overlay and it is added above the line it comments on and has the same indentation. The virtual comment can be single line or multiline. Each line can have one comment.

[[file:images/Utility/2022-03-11_11-49-07_screenshot.png][commands]]

#+begin_src emacs-lisp :lexical no
;; This package allows adding virtual comments to files in buffers.
;; These comments don’t belong to the files so they don’t.
;; They are saved in project root or a global file which can be viewed and searched.
;; The file name is .evc.
(use-package virtual-comment)
#+end_src

** COMMENT go-translate
https://github.com/lorniu/go-translate/tree/master

https://ag91.github.io/blog/2022/01/16/moldable-emacs-translate-string-at-point-in-multiple-languages/

#+begin_src emacs-lisp :lexical no
(use-package go-translate
  :config
  (setq gts-translate-list '(("en" "th") ("en" "ko") ("en" "ru"))))
#+end_src

** indent-tools
https://gitlab.com/emacs-stuff/indent-tools

#+begin_src emacs-lisp :lexical no
(use-package indent-tools
  :config
  (global-set-key (kbd "C-c >") 'indent-tools-hydra/body))
#+end_src

** indent-bars
https://github.com/jdtsmith/indent-bars

#+begin_src emacs-lisp
(use-package indent-bars
  :hook ((python-mode yaml-mode) . indent-bars-mode))
#+end_src

** Custom functions
=org-toggle-inline-images= doesn't toggle those with a description

#+begin_src emacs-lisp
  (defun nbl/org-toggle-inline-images () (interactive)
         (org-toggle-inline-images 1))
#+end_src

#+begin_src emacs-lisp
(defun nbl/fill-paragraph-or-region ()
  (interactive)
  (if (region-active-p)
      (fill-region-as-paragraph
       (region-beginning)
       (region-end))
    (fill-paragraph)))

(bind-key* (kbd "M-q") 'nbl/fill-paragraph-or-region)
#+end_src

** ssh
*** Custom

#+begin_src emacs-lisp :lexical no
(defun nbl/koreader-kindle-ssh ()
  (interactive)
  (find-file "/ssh:root@192.168.0.102#2222:/mnt/us"))
#+end_src

*** COMMENT Basic

#+begin_src emacs-lisp :lexical no
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "/sshx:user@host:")
                   "remote-shell" "/usr/bin/bash"))
#+end_src

*** ssh-config-mode
https://github.com/jhgorrell/ssh-config-mode-el/tree/master

=# -*- mode: ssh-config -*-=

#+begin_src emacs-lisp :lexical no
(use-package ssh-config-mode)
#+end_src

*** ssh-agent

#+CAPTION: This is what people do
#+begin_src shell :eval no
eval "$(ssh-agent)"
ssh-add
#+end_src

https://emacs.stackexchange.com/questions/17866/magit-how-to-use-systems-ssh-agent-and-dont-ask-for-password
We will load the env variables "SSH_AGENT_PID" and "SSH_AUTH_SOCK" and then do an 'ssh-add'.

#+begin_src emacs-lisp
(defun nbl/ssh-add () (interactive)
       (let ((time (eval (car (read-from-string
                               (read-string "Life (in seconds): "
                                            (format "(* %s 1)" (* 24 60 60))))))))
         (cond ((not (require 'exec-path-from-shell nil :no-error))
                (warn "emacs package 'exec-path-from-shell' not installed."))
               ((exec-path-from-shell-copy-env "SSH_AGENT_PID")
                ;; ssh-agent is running
                (exec-path-from-shell-copy-env "SSH_AGENT_PID")
                (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
                (async-shell-command (format "ssh-add -t %s" time)))
               (t
                (message "Looking for existing $XDG_RUNTIME_DIR/ssh-agent.env")
                (let* ((xdg-runtime-dir (getenv "XDG_RUNTIME_DIR"))
                       (ssh-agent-env (format "%s/%s" xdg-runtime-dir "ssh-agent.env")))
                  (unless (file-exists-p ssh-agent-env)
                    (error (format "No such file: %s, expecting $XDG_RUNTIME_DIR/ssh-agent.env" ssh-agent-env)))
                  (with-temp-buffer
                    (insert-file-contents ssh-agent-env)
                    (goto-char (point-min))
                    (while (re-search-forward "^\\(SSH_[^=]+\\)=\\([^;]+\\)" nil t)
                      (message (format "Setting $SSH_%s to %s"
                                       (match-string 1)
                                       (match-string 2)))
                      (setenv (match-string 1) (match-string 2)))))
                (async-shell-command (format "ssh-add -t %s" time))))))
#+end_src

** auth

#+begin_src emacs-lisp :lexical no
(setq auth-sources '("~/.authinfo"))
#+end_src

** ledger-mode
Install =ledger= application.

#+begin_src emacs-lisp :lexical no
(use-package ledger-mode)
#+end_src

** devdocs
https://github.com/astoff/devdocs.el

#+begin_src emacs-lisp :lexical no
(use-package devdocs
  :bind (("C-h D" . devdocs-lookup))
  :config
  (add-hook 'java-mode-hook
            (lambda () (setq-local devdocs-current-docs '("openjdk~18")))))
#+end_src

** COMMENT crdt
https://elpa.gnu.org/packages/crdt.html#org74bb356

crdt.el is a real-time collaborative editing environment for Emacs using Conflict-free Replicated Data Types.

Highlights:

    CRDT, darling child of collaborative editing researches…
    Share multiple buffer in one session
    See other users' cursor and region
    Synchronize Org mode folding status
    Org mode integration
    Comint derivatives integration (experimental)

#+begin_src emacs-lisp :lexical no
(use-package crdt
  :bind (:map crdt-mode-map
              ("C-c p" . crdt-list-users)
              ("C-c b" . crdt-list-buffers)
              ("C-c s" . crdt-list-sessions)
              ("C-x C-b" . crdt-switch-to-buffer))
  :config
  (setq crdt-visualize-author-mode t
        crdt-use-tuntox t
        crdt-tuntox-executable "~/.emacs.d/manual/tuntox-x64"))
#+end_src

** AI
*** aidermacs
https://github.com/MatthewZMD/aidermacs

Install https://aider.chat/docs/install.html

#+begin_src emacs-lisp
(use-package aidermacs
  :ensure (aidermacs
           :host github
           :repo "MatthewZMD/aidermacs"
           :files ("*.el")
           :rev :newest)
  :config
  (bind-key* (kbd "C-c a") 'aidermacs-transient-menu)
  (setq
   ;; aidermacs-default-model "gemini/gemini-2.0-flash"
   aidermacs-default-model "gemini/gemini-2.5-pro-exp-03-25"
   aidermacs-backend 'vterm
   aidermacs-vterm-multiline-newline-key "M-<return>"
   aidermacs-auto-commits nil
   aidermacs-extra-args '("--watch-files"
                          ;; https://aider.chat/docs/more/edit-formats.html
                          "--edit-format diff-fenced"))
  ;; https://github.com/MatthewZMD/aidermacs#prompt-files-minor-mode
  (aidermacs-setup-minor-mode))
#+end_src

*** COMMENT copilot.el
https://github.com/copilot-emacs/copilot.el

Install the copilot server by =M-x copilot-install-server=.

Login to Copilot by =M-x copilot-login=. You can also check the status by =M-x copilot-diagnose= (NotAuthorized means you don't have a valid subscription).


#+begin_src emacs-lisp
(use-package copilot
  :ensure (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
  :hook ((prog-mode . copilot-mode))
  :config
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  ;; (add-to-list 'copilot-major-mode-alist '("enh-ruby" . "ruby"))
  (setq copilot-idle-delay 0.1
        copilot-log-max 4
        copilot-indent-offset-warning-disable t))
#+end_src

** ediff

#+begin_src emacs-lisp :lexical no
(when (require 'ediff nil :no-error)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        ediff-diff-options "-w")
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo))
#+end_src

** security
*** age
https://github.com/anticomputer/age.el

Identities (private keys) and recipients (public keys) are maintained via the customizable age-default-identity and age-default-recipient variables. By default they are set to ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub respectively.

#+begin_src emacs-lisp :lexical no
(use-package age
  :ensure t
  :demand t
  :custom
  (age-default-identity "~/.age/key")
  (age-default-recipient "~/.age/key.pub")
  :config
  (age-file-disable))
#+end_src

** pfuture
#+begin_src emacs-lisp
(use-package pfuture)
#+end_src

** dotenv-mode
https://github.com/preetpalS/emacs-dotenv-mode

An Emacs mode for .env files

#+begin_src emacs-lisp :lexical no
(use-package dotenv-mode
  :config
  ;; for optionally supporting additional file extensions such as `.env.test'
  ;; with this major mode
  (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode)))
#+end_src

** hideshow
https://karthinks.com/software/simple-folding-with-hideshow/

#+begin_src emacs-lisp :lexical no
(require 'hideshow)

(defun hs-cycle (&optional level)
  (interactive "p")
  (let (message-log-max
        (inhibit-message t))
    (if (= level 1)
        (pcase last-command
          ('hs-cycle
           (hs-hide-level 1)
           (setq this-command 'hs-cycle-children))
          ('hs-cycle-children
           ;; todo: Fix this case. `hs-show-block' needs to be
           ;; called twice to open all folds of the parent
           ;; block.
           (save-excursion (hs-show-block))
           (hs-show-block)
           (setq this-command 'hs-cycle-subtree))
          ('hs-cycle-subtree
           (hs-hide-block))
          (_
           (if (not (hs-already-hidden-p))
               (hs-hide-block)
             (hs-hide-level 1)
             (setq this-command 'hs-cycle-children))))
      (hs-hide-level level)
      (setq this-command 'hs-hide-level))))

(defun hs-global-cycle ()
  (interactive)
  (pcase last-command
    ('hs-global-cycle
     (save-excursion (hs-show-all))
     (setq this-command 'hs-global-show))
    (_ (hs-hide-all))))

(use-package hideshow
  :ensure nil
  :hook (prog-mode . hs-minor-mode)
  :bind (:map hs-minor-mode-map
              ("C-<tab>" . hs-cycle)
              ("C-S-<tab>" . hs-global-cycle)
              ("C-<iso-lefttab>" . hs-global-cycle)))


#+end_src

** Fun
*** Hindi
https://www.emacswiki.org/emacs/SupportHindi
- In a buffer of choice, type =C-x RET C-\ devanagari-itrans=. This sets your input method. Later, type =C-\= to toggle between hindi and english.
  
- To convert a piece of hindi text into its phonetic roman equivalent or vice versa, use =M-x devanagari-(encode/decode)-itrans-region=. As you will soon find out, that conversion is not perfect and has minor bugs.

- When you reload a file in which you had typed some hindi, the characters are disjoint and not formed into words. To convert them back, this works for me: =M-x indian-to-devanagari-region=, followed by =M-x devanagari-compose-region=.

- See many other useful functions in your emacs’ devan-utils.el and devanagari.el.
  
*** nov
#+begin_src emacs-lisp
  (use-package nov
    ;;:hook (nov-mode . olivetti-mode)
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

#+RESULTS:
| olivetti-mode |
*** COMMENT parrot

#+begin_src emacs-lisp
  (use-package parrot
    :config
    (setq parrot-num-rotations nil)
    (setq parrot-animation-frame-interval 0.030) ;; default 0.045
    (parrot-set-parrot-type 'thumbsup) 
    (parrot-mode 1))
#+end_src

*** nyan

#+begin_src emacs-lisp
(use-package nyan-mode
  :config
  (setq nyan-animate-nyancat t)
  (setq nyan-wavy-trail nil)
  ;; (setq nyan-)
  (nyan-mode 1))
#+end_src

*** COMMENT poke-line

#+begin_src emacs-lisp
  (use-package poke-line
    :config
    (poke-line-global-mode 1)
    (setq-default poke-line-pokemon "squirtle"))
#+end_src

*** COMMENT mlscroll

#+begin_src emacs-lisp
  (use-package mlscroll
    :config
    ;; truncate which-func, for default mode-line-format's
    (setq mlscroll-shortfun-min-width nil)
    (setq mlscroll-right-align nil
          mlscroll-alter-percent-position 'replace)
    (mlscroll-mode 1))
#+end_src

*** beacon

#+begin_src emacs-lisp
(use-package beacon
  :config
  (setq beacon-blink-when-focused t
        beacon-blink-when-buffer-changes t)
  (beacon-mode 1))
#+end_src

*** COMMENT line-reminder
https://github.com/emacs-vs/line-reminder

#+begin_src emacs-lisp :lexical no
  (use-package line-reminder
    :hook ((linum-mode . line-reminder-mode)))
#+end_src

*** COMMENT highlight-tail

#+begin_src emacs-lisp
  (defun nbl/highlight-tail-mode-enable () ()
         (highlight-tail-mode 1))

  (use-package highlight-tail
    :hook ((prog-mode . nbl/highlight-tail-mode-enable)
           (text-mode . nbl/highlight-tail-mode-enable)
           (org-mode  . nbl/highlight-tail-mode-enable))
    :config
    (setq highlight-tail-colors '(("#0000ff" . 0)
                                  ("#000080" . 20))))
#+end_src

*** Info colours

#+begin_src emacs-lisp :lexical no
  (use-package info-colors
    :commands (info-colors-fontify-node))

  (add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

*** COMMENT svg-tag-mode

#+begin_src emacs-lisp :lexical no
  (use-package svg-tag-mode
    :ensure t
    :hook  ((org-mode . svg-tag-mode)))
#+end_src

#+begin_src emacs-lisp :lexical no
  ;; Copyright (C) 2020, 2021 Free Software Foundation, Inc.
  ;;
  ;; This file is not part of GNU Emacs.
  ;;
  ;; This file is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.
  ;;
  ;; This file is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; For a full copy of the GNU General Public License
  ;; see <http://www.gnu.org/licenses/>.
  (require 'svg-tag-mode)

  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%")
                             nil :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center)))

  (setq svg-tag-tags
        `(
          ;; Org tags
          (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
          (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

          ;; Task priority
          ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                (svg-tag-make tag :face 'org-priority 
                                              :beg 2 :end -1 :margin 0))))

          ;; Progress
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))

          ;; TODO / DONE
          ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
          ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


          ;; Citation of the form [cite:@Knuth:1984] 
          ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                            (svg-tag-make tag
                                                          :inverse t
                                                          :beg 7 :end -1
                                                          :crop-right t))))
          ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                     (svg-tag-make tag
                                                                   :end -1
                                                                   :crop-left t))))


          ;; Active date (without day name, with or without time)
          (,(format "\\(<%s>\\)" date-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0))))
          (,(format "\\(<%s *\\)%s>" date-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
          (,(format "<%s *\\(%s>\\)" date-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

          ;; Inactive date  (without day name, with or without time)
          (,(format "\\(\\[%s\\]\\)" date-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
          (,(format "\\(\\[%s *\\)%s\\]" date-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
          (,(format "\\[%s *\\(%s\\]\\)" date-re time-re) .
           ((lambda (tag)
              (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))))

  (svg-tag-mode t)

  ;; To do:         TODO DONE  
  ;; Tags:          :TAG1:TAG2:TAG3:
  ;; Priorities:    [#A] [#B] [#C]
  ;; Progress:      [1/3]
  ;;                [42%]
  ;; Active date:   <2021-12-24>
  ;;                <2021-12-24 14:00>
  ;; Inactive date: [2021-12-24]
  ;;                [2021-12-24 14:00]
  ;; Citation:      [cite:@Knuth:1984] 
#+end_src
- 

*** COMMENT volatile-highlights
https://github.com/k-talo/volatile-highlights.el

#+begin_src emacs-lisp :lexical no
  (use-package volatile-highlights
    :config
    (volatile-highlights-mode 1))
#+end_src

*** COMMENT undo-hl

#+begin_src emacs-lisp :lexical no
(use-package undo-hl
  :ensure (:type git
           :host github
           :repo "casouri/undo-hl"
           :branch "master")
  :hook ((prog-mode . undo-hl-mode)
         (org-mode . undo-hl-mode))
  :config
  (setq undo-hl-undo-commands
        '(undo undo-only undo-redo
               undo-fu-only-undo undo-fu-only-redo
               undo-tree-undo undo-tree-redo)))
#+end_src

*** emacs-camera
https://codeberg.org/akib/emacs-camera

- needs software 'ffmpeg'
  
#+begin_src emacs-lisp :lexical no
(use-package camera
  :ensure (:type git
           :repo "https://codeberg.org/akib/emacs-camera.git"))
#+end_src

*** memento-mori
https://github.com/gvol/emacs-memento-mori

#+begin_src emacs-lisp :lexical no
(use-package memento-mori
  :ensure t
  :custom (memento-mori-mementos
           '(("%.5Y years old" :since "1997-06-16")))
  :config
  (memento-mori-mode))
#+end_src

* Languages
** lsp

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (c++-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :config)

(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol
;;   :config
;;   (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))

(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode
  :config
  (require 'dap-firefox)
  ;; Have to do 'M-x dap-firefox-setup',
  ;; then dap-firefox-debug-program will have valid path on your system.
  )

;; (use-package dap-LANGUAGE) to load the dap adapter for your language


;; company-lsp
;; (use-package company-lsp
;;   ;;:commands company-lsp
;;   :config
;;   (push 'company-lsp company-backends)
;;   (setq company-lsp-async t
;; 	company-lsp-enable-snippet t
;; 	company-lsp-enable-recompletion t
;; 	company-lsp-cache-candidates nil))

#+end_src

** eglot
https://github.com/joaotavora/eglot

#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :bind (:map eglot-mode-map
              ("C-c h" . eldoc)
              ("C-c r" . eglot-rename)
              ("M-." . xref-find-definitions)
              ("M-?" . xref-find-references))
  :config
  (setq eglot-connect-timeout 30
        eglot-extend-to-xref t)
  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1))))
#+end_src

** TODO dape
** C/C++

*** ccls
Install ccls (LSP server for C/C++)

*** COMMENT emacs-ccls
Uses lsp-mode

#+begin_src emacs-lisp
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp-deferred))))
#+end_src

*** COMMENT ninja

#+begin_src emacs-lisp
(use-package ninja-mode)
#+end_src

** COMMENT Rust
- Setup :: https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/
*** rustic

#+begin_src emacs-lisp :lexical no
(use-package rustic
  :bind (:map rustic-mode-map
              ("C-c C-k" . rustic-compile)
              ("C-c C-s" . rust-dbg-wrap-or-unwrap)
              ("C-c C-d" . eldoc))
  :config
  (setq rustic-lsp-client 'eglot)
  ;; (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
  )
#+end_src

*** rust-playground
https://github.com/grafov/rust-playground/tree/5a117781dcb66065bea7830dd73618008fc34949

- =C-c C-c= :: ~rust-playground-exec~
  It will save, compile and exec the snippet code.
- =C-c k= :: ~rust-playground-rm~
  It will remove the current snippet with its directory and all files.
#+begin_src emacs-lisp
(use-package rust-playground)
#+end_src

*** ob-rust
https://github.com/micanzhang/ob-rust/tree/30fe7e7181f44443d02e905dda77f83ec4944e76
 It was created based on the usage of
 - http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html
 - https://github.com/pope/ob-go
   
#+begin_src emacs-lisp :lexical no
(use-package ob-rust
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((rust . t))))
#+end_src

** COMMENT Clojure

#+begin_src emacs-lisp :lexical no
(use-package cider)
#+end_src

** Lisp
*** Common Lisp
**** Basic

#+begin_src emacs-lisp
;; (setq inferior-lisp-program "ros -Q run -- --dynamic-space-size 32000 --control-stack-size 4096")
(setq inferior-lisp-program "sbcl --dynamic-space-size 32000 --control-stack-size 4096")
(setq max-lisp-eval-depth 8000)

;; .mlisp
(add-to-list 'auto-mode-alist '("\\.mlisp\\'" . lisp-mode))
#+end_src
**** .roswell
***** init.lisp

- Rather than pushing the directory, that we want ASDF to search, into ~asdf:*central-registry*~, we can call the following function

  - If only one asd file is present, it loads it. If none are present, it issues an error. And if more than one is present (for whatever reason), it offers a choice of which to choose or 0 to bail.
  - Lives in =~/.roswell/init.lisp=

    #+begin_src emacs-lisp
      (make-directory "~/.roswell" :parents)
    #+end_src
    
#+begin_src lisp :tangle ~/.roswell/init.lisp
;; Written by https://www.reddit.com/user/mirkov19/
(defun asdf::load-local-system (&rest keys
                                &key
                                (directory *default-pathname-defaults*)
                                &allow-other-keys)
  "Load asdf system present in DIRECTORY (default *DEFAULT-PATHNAME-DEFAULTS*)

Pass all other keywords to ASDF:LOAD-SYSTEM

This function is also an external symbol of ASDF package

If no system is present, issue an error.
If multiple systems are present, display them and allow user to select system to load,
or to enter 0 to bail"
  (let* ((asdf:*central-registry* (push directory asdf:*central-registry*))
         (asd-files (remove-if-not (lambda (filetype)
                                     (string= filetype "asd"))
                                   (uiop:directory-files directory)
                                   :key #'pathname-type)))
    (labels ((load-system (system)
               (format t "Found system \"~a\", loading it" system)
               (apply #'asdf:load-system system keys)))
      (case (length asd-files)
        (0 (error "No ASD files in ~a" directory))
        (1 (let ((system (pathname-name (first asd-files))))
             (load-system system)))
        (t (let* ((systems (mapcar #'pathname-name asd-files))
                  (system
                    (progn
                      (loop :for i :from 1
                            :for system :in systems
                            :do (format t "~a: ~a~%" i system))
                      (format *query-io* "Select system (0 for none): ")
                      (force-output *query-io*)
                      (let ((index (parse-integer (read-line *query-io*))))
                        (if (zerop index)
                            (format t "No file selected~%")
                            (nth index systems))))))
             (load-system system)))))))
#+end_src

**** Sly
***** Basic

#+begin_src emacs-lisp
(use-package sly
  :hook ((sly-mode . rainbow-delimiters-mode)
         (sly-mrepl-mode . lispy-mode))
  :bind (;; ("C-c C-d C-l" . sly-quickload)
         :map sly-mode-map
         ("C-r" . comint-history-isearch-backward-regexp))
  :config
  (setq slynk-stickers:*break-on-stickers* '(:before :after)
        sly-net-coding-system 'utf-8-unix
        sly-common-lisp-style-default 'sbcl)
  (setq sly-lisp-implementations
        '((sbcl ;; ("ros" "-Q" "run" "--" "--dynamic-space-size" "32000" "--control-stack-size" "4096")
           ("sbcl" "--dynamic-space-size" "32000" "--control-stack-size" "4096"))
          (lispworks ("ros" "-Q" "-L" "lispworks" "run"))))

  ;;(require 'sly-cl-indent (concat (getenv "HOME") "/.emacs.d/straight/repos/sly/lib/sly-cl-indent.el"))
  ;; To have Sly perform the indentation in the preferred style for Common Lisp code
  (setq sly-default-lisp 'sbcl))


;; (setq inferior-lisp-program nil)
;; (setq inferior-lisp-program "ros -Q run -- --dynamic-space-size 32000 --control-stack-size 4096")

;; log4cl
;; To change the ROOT category from Emacs, you can use Log4CL dropdown submenu, or Emacs command log4slime-level-selection which is bound to C-c C-g by default.
;;(load "~/.roswell/lisp/quicklisp/log4sly-setup.el")
;;(global-log4sly-mode 1)
#+end_src

Turn off string elision
#+begin_src elisp :lexical no :tangle ~/.slynkrc
(setf (cdr (assoc 'slynk:*string-elision-length* slynk:*slynk-pprint-bindings*)) nil)
#+end_src

***** COMMENT mind-style

#+begin_src emacs-lisp :lexical no
(defun nbl-mind-style () (interactive)
       (sly-define-common-lisp-style "mind"
         "Style used in Mind sources. "
         (:inherit "sbcl")
         (:eval
          (whitespace-mode 1))
         (:variables
          (whitespace-style (tabs trailing))
          (indent-tabs-mode nil)
          (comment-fill-column nil)
          (fill-column 78))
         (:indentation
          (with-iter-canonical-slot            (as with-input-from-string))
          (if-let            (as if))
          (aif            (as if))
          (when-let            (as when))
          (awhen            (as when))
          (def!constant            (as defconstant)))))

(add-hook 'sly-mode-hook #'(lambda ()
                             (nbl-mind-style)
                             (setq sly-common-lisp-style-default 'mind)))
;; (require 'sly-cl-indent)
;; (eval-after-load "sly-cl-indent"
;;   `(sly-define-common-lisp-style "mind"
;;      "Style used in Mind sources. "
;;      (:inherit "sbcl")
;;      (:eval
;;       (whitespace-mode 1))
;;      (:variables
;;       (whitespace-style (tabs trailing))
;;       (indent-tabs-mode nil)
;;       (comment-fill-column nil)
;;       (fill-column 78))
;;      (:indentation
;;       (with-iter-canonical-slot            (as with-input-from-string))
;;       (if-let            (as if))
;;       (aif            (as if))
;;       (when-let            (as when))
;;       (awhen            (as when))
;;       (def!constant            (as defconstant)))))
#+end_src

***** sly-repl-ansi-color

#+begin_src emacs-lisp 
  (use-package sly-repl-ansi-color
    :config
    (push 'sly-repl-ansi-color sly-contribs ))
#+end_src

***** sly-quicklisp
https://github.com/joaotavora/sly-quicklisp/tree/a46b848a2e6d206542c4cc14869456ba1eac7c9a
sly-quickload command =C-c C-d C-q= that prompts the user for a package to install.

#+begin_src emacs-lisp 
  (use-package sly-quicklisp)
#+end_src

***** sly-asdf
https://github.com/mmgeorge/sly-asdf
When using the built-in system load utlity, accessed via =, + load-system= from the repl, ASDF system compilation and load errors will be trapped and recorded as with other sly compilation errors, as opposed to dumping into the debugger like with calling ~asdf:load-system~ directly.

#+begin_src emacs-lisp 
  (use-package sly-asdf)
#+end_src

***** sly-macrostep
https://github.com/joaotavora/sly-macrostep
In /.lisp/ files you can now use =C-c M-e= or =M-x macrostep-expand= to expand a macro.

#+begin_src emacs-lisp 
  (use-package sly-macrostep)
#+end_src

***** COMMENT sly-stepper
https://github.com/joaotavora/sly-stepper

#+begin_src emacs-lisp 
(use-package sly-stepper
  :after sly
  :ensure (:type git
           :host github
           :repo "joaotavora/sly-stepper"
           :branch "master"))
#+end_src

***** sly-named-readtables
https://github.com/joaotavora/sly-named-readtables

#+begin_src emacs-lisp :lexical no
(use-package sly-named-readtables)
#+end_src

***** COMMENT sly-package-inferred
- Warning! :: This system works with SLY version installed from [[https://github.com/svetlyak40wt/sly/tree/patches][here]]. Because it contains patch joaotavora/sly#417 which is not merged yet to upstream.

  #+begin_src emacs-lisp :lexical no
  (use-package sly-package-inferred
    :ensure (:type git
             :host github
             :repo "40ants/sly-package-inferred"
             :branch "master")
    :config
    (require 'sly-package-inferred-autoloads))
  #+end_src

**** COMMENT stumpwm-mode
- Stumpwm things I keep forgetting:
  - =<prefix> ;= :: can run stumpwm commands
  - =<prefix> := :: can run common lisp eval
  - some key combo =?= :: show valid key combos with 'some key combo' as their prefix
    For eg: =<prefix> h ?= Nice.

load this file, set stumpwm-shell-program to point to stumpish and
run =M-x stumpwm-mode= in your stumpwm lisp files.
Now, you can easily eval code into a running stumpwm using the regular bindings.

#+begin_src emacs-lisp
  (use-package stumpwm-mode
    :config
    (setq stumpwm-shell-program "/usr/bin/stumpish"))
#+end_src

**** COMMENT adjust-parens
https://elpa.gnu.org/packages/adjust-parens.html

#+begin_src emacs-lisp
  (use-package adjust-parens
    :hook ((paxedit-mode . adjust-parens-mode)
           (paredit-mode . adjust-parens-mode))
    :bind (:map adjust-parens-mode-map
                ("C-i" . lisp-indent-adjust-parens)
                ("M-i" . lisp-dedent-adjust-parens)))
#+end_src

**** COMMENT highlight-quoted

#+begin_src emacs-lisp
  (use-package highlight-quoted
    :hook ((paxedit-mode . highlight-quoted-mode)
           (paredit-mode . highlight-quoted-mode)))
#+end_src

**** COMMENT paredit

#+begin_src emacs-lisp
(use-package paredit
  :init
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  :hook ((emacs-lisp-mode . paredit-mode)
         (scheme-mode . paredit-mode)
         (lisp-mode . paredit-mode)
         (lisp-interaction-mode . paredit-mode)
         (slime-repl-mode . paredit-mode)
         (sly-mrepl-mode . paredit-mode)
         (racket-mode . paredit-mode)
         (racket-repl-mode . paredit-mode)
         ) 
  :config
  (unless terminal-frame
    (bind-keys :map paredit-mode-map
p               ;; ("M-[" . paredit-wrap-square)
               ;; ("M-{" . paredit-wrap-curly)
               )))

(general-unbind 'emacs
  "ESC")
;; (with-eval-after-load 'xah-fly-keys
;;   ;; Command mode keybindings:
;;   (define-key xah-fly-command-map (kbd "I") #'DEFINITION)
;;   (define-key xah-fly-command-map (kbd "J") #'DEFINITION)
;;   (define-key xah-fly-command-map (kbd "K") #'DEFINITION)
;;   (define-key xah-fly-command-map (kbd "L") #'DEFINITION))

(with-eval-after-load 'paredit
  (general-def paredit-mode-map "{"    'paredit-open-curly)
  (general-def paredit-mode-map "}"    'paredit-close-curly)
  (general-def paredit-mode-map "C-0"  'paredit-forward-slurp-sexp)
  (general-def paredit-mode-map "M-0"  'paredit-forward-barf-sexp)
  (general-def paredit-mode-map "C-9"  'paredit-backward-slurp-sexp)
  (general-def paredit-mode-map "M-9"  'paredit-backward-barf-sexp))


#+end_src
**** COMMENT parinfer
https://shaunlebron.github.io/parinfer/#introduction

+ We perform the following steps to rearrange close-parens based on indentation.
We will refer to these later as rules #1, #2, #3 and #4.

1. remove all unmatched close-parens (for housekeeping)
2. remove all close-parens at the start and end of each line
3. keep all close-parens inside each line
4. for every resulting unmatched open-paren:
   - insert a matching close-paren at the end of its line or its last non-empty indented line 

#+begin_src emacs-lisp
  (use-package parinfer
    :hook ((emacs-lisp-mode . parinfer-mode-enable)
           (scheme-mode . parinfer-mode-enable)
           (lisp-mode . parinfer-mode-enable)
           (lisp-interaction-mode . parinfer-mode-enable)
           (slime-repl-mode . parinfer-mode-enable)
           (racket-mode . parinfer-mode-enable))
    :bind (:map parinfer-mode-map
                ("C-M-i " . parinfer-toggle-mode)))

#+end_src

**** COMMENT paxedit

#+begin_src emacs-lisp
  (use-package paxedit
    :hook  ((emacs-lisp-mode . paxedit-mode)
            (scheme-mode . paxedit-mode)
            (lisp-mode . paxedit-mode)
            (lisp-interaction-mode . paxedit-mode)
            (slime-repl-mode . paxedit-mode)
            (racket-mode . paxedit-mode)
            (racket-repl-mode . paxedit-mode)))

  (eval-after-load "paxedit"
    '(progn (define-key paxedit-mode-map (kbd "M-<right>") 'paxedit-transpose-forward)
            (define-key paxedit-mode-map (kbd "M-<left>") 'paxedit-transpose-backward)
            (define-key paxedit-mode-map (kbd "M-<up>") 'paxedit-backward-up)
            (define-key paxedit-mode-map (kbd "M-<down>") 'paxedit-backward-end)
            (define-key paxedit-mode-map (kbd "M-b") 'paxedit-previous-symbol)
            (define-key paxedit-mode-map (kbd "M-f") 'paxedit-next-symbol)
            (define-key paxedit-mode-map (kbd "C-%") 'paxedit-copy)
            (define-key paxedit-mode-map (kbd "C-&") 'paxedit-kill)
            (define-key paxedit-mode-map (kbd "C-*") 'paxedit-delete)
            (define-key paxedit-mode-map (kbd "C-^") 'paxedit-sexp-raise)
            ;; Symbol backward/forward kill
            (define-key paxedit-mode-map (kbd "C-w") 'paxedit-backward-kill)
            (define-key paxedit-mode-map (kbd "M-w") 'paxedit-forward-kill)
            ;; Symbol manipulation
            (define-key paxedit-mode-map (kbd "M-u") 'paxedit-symbol-change-case)
            (define-key paxedit-mode-map (kbd "C-@") 'paxedit-symbol-copy)
            (define-key paxedit-mode-map (kbd "C-#") 'paxedit-symbol-kill)))
#+end_src

**** COMMENT clhs

Access the Common lisp Hyperspec(CLHS)

Browse the Common Lisp HyperSpec documentation for the symbol at point.
Find the HyperSpec at =clhs-root=.
With prefix arg, save the URL in the =kill-ring= instead.

#+begin_src emacs-lisp
(use-package clhs
  :config
  (autoload 'clhs-doc "clhs" "Get doc on ANSI CL" t)
  (define-key help-map "\C-l" 'clhs-doc)
  (custom-set-variables
   '(tags-apropos-additional-actions '(("Common Lisp" clhs-doc clhs-symbols)))))

;; CLHS is installed in this directory
;;   /home/nabeel/.roswell/lisp/quicklisp/dists/quicklisp/software/
;; Use C-c C-d h make-instance RET to test if the change was successful.
;; If it was, then this will open your browser and the URL will begin with "file:///".
(load "/home/nabeel/.roswell/lisp/quicklisp/clhs-use-local.el" t)
;; If the default browser used is not the one you wanted, here's how
;; you might tell Emacs to use Firefox instead:

(setq browse-url-firefox-program "firefox")

;; Or Google Chrome:

;; (setq browse-url-browser-function 'browse-url-generic)
;; (setq browse-url-generic-program "google-chrome")
#+end_src

**** literate-lisp
https://github.com/jingtaozf/literate-lisp

*** emacs-lisp
**** eros
#+begin_src emacs-lisp
(use-package eros)
#+end_src

*** Scheme
**** geiser

#+begin_src emacs-lisp
(use-package geiser
  :config
  (setq geiser-active-implementations '(guile))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t))))
#+end_src

**** COMMENT geiser eros

#+begin_src emacs-lisp :lexical no

#+end_src

**** guile

#+begin_src emacs-lisp
(use-package geiser-guile
  :config
  (setq geiser-guile-binary "guile")
  (when guix?
    (with-eval-after-load 'geiser-guile
      (add-to-list 'geiser-guile-load-path guix-checkout-path)
      (add-to-list 'geiser-guile-load-path (concat (getenv "HOME") "/src/nonguix"))
      (add-to-list 'geiser-guile-load-path (concat (getenv "HOME") "/.config/guix/current/share")))))
#+end_src

When evaluation scheme using =lispy-eval= I get the error 'lispy--eval-scheme: Symbol’s function definition is void: geiser-racket--language'

#+begin_src emacs-lisp
(defun geiser-racket--language () '())
#+end_src


**** racket
Install =racket=.
After installing 'racket', the following programs will also be made available:
- =raco=
- =drracket=
#+CAPTION: If not installed then
  #+begin_src shell
  raco pkg install --auto drracket
  #+end_src

https://racket-mode.com/#racket_002dmode_002dstart_002dfaster

use =M-x racket-mode-start-faster= after installing each new racket version.

Use =C-c C-.= /racket-describe/.

#+begin_src emacs-lisp
(use-package racket-mode
  :mode ("\\.rkt\\'" . racket-mode)
  :bind (:map racket-mode-map
              ("C-c C-p" . racket-cycle-paren-shapes))
  :config
  ;; the below RACKET-UNICODE-INPUT-METHOD-ENABLE caused problems with LISPY
  ;; (add-hook 'racket-mode-hook      #'racket-unicode-input-method-enable)
  ;; (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((racket . t))))
#+end_src
    
**** sicp-info
https://github.com/webframp/sicp-info
Gets the texinfo of SICP into emacs.
Do =M-x info= and search for 'SICP'

#+begin_src emacs-lisp :lexical no
(use-package sicp)
#+end_src

*** lispy

See reference https://oremacs.com/lispy/
- To insert square brackets: =}=

#+begin_src emacs-lisp
(use-package lispy
  :ensure (:host github :repo "enzuru/lispy")
  :hook ((emacs-lisp-mode . lispy-mode)
         (scheme-mode . lispy-mode)
         (lisp-mode . lispy-mode)
         (lisp-interaction-mode . lispy-mode)
         (slime-repl-mode . lispy-mode)
         (sly-mrepl-mode . lispy-mode)
         (racket-mode . lispy-mode)
         (racket-repl-mode . lispy-mode))
  :bind (:map lispy-mode-map
              ("M-." . nil)
              ("E" . lispy-eval-and-comment))
  :config
  ;; no space when pressing :
  (setq lispy-colon-p nil)
  (define-key lispy-mode-map (kbd "SPC") #'lispy-space))
#+end_src

*** prism-mode
https://github.com/alphapapa/prism.el

#+begin_src emacs-lisp :lexical no
(use-package prism
  :hook ((lispy-mode . prism-mode)))
#+end_src

** COMMENT Haskell
*** haskell-mode
https://haskell.github.io/haskell-mode/manual/latest/index.html#Top

#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (setq haskell-process-path-ghci "~/.ghcup/bin/ghci"))

(add-hook 'haskell-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends)
                 (append '((company-capf company-dabbrev-code))
                         company-backends))))

(setq exec-path (append '("/home/nabeel/.cabal/bin") exec-path))
#+end_src

** COMMENT Antlr4
https://www.antlr.org/index.html
- Make sure java is installed with
  #+begin_src shell
  sudo apt install openjdk-11-jdk
  #+end_src

- To install antrl do:
 #+begin_src shell
 cd /usr/local/lib/
 sudo wget http://www.antlr.org/download/antlr-4.7-complete.jar
 #+end_src

 After that add to your =~/.bashrc=
 #+begin_src shell
 # ANTLR-4
 export CLASSPATH=".:/usr/local/lib/antlr-4.7-complete.jar:$CLASSPATH"
 alias antlr4='java -jar /usr/local/lib/antlr-4.7-complete.jar'
 ## for tool TestRig
 alias grun='java org.antlr.v4.gui.TestRig'
 #+end_src

- Emacs ships with old antlr-mode, find the latest one here https://sourceforge.net/projects/antlr-mode/
  #+begin_src shell
  mv ~/Downloads/antlr-mode-3.1.5.tar.gz ~/.emacs.d/manual/
  cd ~/.emacs.d/manual/
  tar -xvf antlr-mode-3.1.5.tar.gz
  #+end_src

#+begin_src emacs-lisp :lexical no
(load "antlr-mode" t)
(add-to-list 'auto-mode-alist '("\\.g4\\'" . antlr-v4-mode))
#+end_src

** Golang
*** go-mode
https://github.com/dominikh/go-mode.el

#+begin_src emacs-lisp :lexical no
(use-package go-mode
  :config
  (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src

*** gopls
Gopls is the official language server protocol (lsp) implementation provided by the Go team. It is intended to replace the existing third party tools for code formatting (gofmt), automatic imports (goimports), code navigation (godef/guru), type and function descriptions (godoc/godef), error checking, auto completion (gocode), variable and type renaming (rename), and more.

#+begin_src shell
go install golang.org/x/tools/gopls@latest
#+end_src

*** ob-go
https://github.com/pope/ob-go

#+begin_src emacs-lisp :lexical no
(use-package ob-go
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((go . t))))
#+end_src

*** go-repl
https://github.com/manute/gorepl-mode

#+begin_src emacs-lisp :lexical no
(use-package gorepl-mode
  :hook (( go-mode . gorepl-mode))
  :bind (:map gorepl-mode-map
              ("C-c C-c" . gorepl-eval-region)
              ("C-c C-l" . nil)
              ("C-c C-e" . nil)
              ("C-c C-z" . gorepl-run)))
#+end_src

** HTML
*** Web mode
https://github.com/fxbois/web-mode

#+begin_src emacs-lisp :lexical no
(use-package web-mode
  :config
  (setq web-mode-content-types-alist
        '(("jsx" . "\\.js[x]?\\'")
          ("tsx" . "\\.ts[x]?\\'"))))
#+end_src

** Java
- Install =java= (jdk)
*** Maven
https://maven.apache.org/guides/getting-started/index.html
https://spring.io/guides/gs/maven/
- Install =maven=
**** mvn-el
https://github.com/apg/mvn-el
#+begin_src emacs-lisp :lexical no
(use-package mvn)
;; The basic operation is to invoke M-x mvn, which will ask you for a goal.

;; M-x mvn-last will re-issue the last command
;; M-x mvn-compile will run the standard mvn compile
;; M-x mvn-clean will run the standard mvn clean
;; M-x mvn-test will run the standard mvn test
#+end_src

**** maven-test-mode
https://github.com/rranelli/maven-test-mode
#+begin_src emacs-lisp :lexical no
(use-package maven-test-mode)

;; toggle back and forth between a test and it's class (bound to \C-c ,t)

;; verify the test class associated with the current buffer (bound to \C-c ,v)

;; verify the test defined in the current buffer if it is a test file (bound to \C-c ,v)

;; verify the test method defined at the point of the current buffer (bound to \C-c ,s)

;; re-run the last verification process (bound to \C-c ,r)

;; run tests for entire project (bound to \C-c ,a)

#+end_src

*** COMMENT lsp-java
https://github.com/emacs-lsp/lsp-java
https://emacs-lsp.github.io/lsp-java/

On usage of lsp-java https://xpressrazor.wordpress.com/2020/11/04/java-programming-in-emacs/

#+begin_src emacs-lisp :lexical no
(use-package lsp-java
  :hook ((java-mode . lsp-deferred))
  :config
  (setq
   ;; Don't organise imports on save
   lsp-java-save-action-organize-imports nil
   ;; Fetch less results from the Eclipse server
   lsp-java-completion-max-results 130
   ;; Download 3rd party sources from Maven repo
   lsp-java-maven-download-sources t
   ))

;;; Spring-boot support
(require 'lsp-java-boot)
;; to enable the lenses
(add-hook 'lsp-mode-hook #'lsp-lens-mode)
(add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
;; lsp-java provides a frontend for Spring Initializr which simplifies the creation of Spring Boot projects directly from Emacs via =lsp-java-spring-initializer=.

#+end_src

** Javascript
*** COMMENT rjsx-mode
https://github.com/felipeochoa/rjsx-mode

#+begin_src emacs-lisp :lexical no
(use-package rjsx-mode
  :hook ((rjsx-mode . lsp-deferred)))
#+end_src

*** js2-mode
https://github.com/mooz/js2-mode
#+begin_src emacs-lisp :lexical no
(use-package js2-mode
  ;; :hook ((js-mode . lsp-deferred))
  :config
  ;; To install it as your major mode for JavaScript editing:
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (add-to-list 'auto-mode-alist '("\\.ts[x]?\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-mode))
  ;; Use Emacs 27 and want to write JSX?
  (add-hook 'js-mode-hook 'js2-minor-mode))


;; You may also want to hook it in for shell scripts running via node.js:
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)))
#+end_src

*** nodejs-repl

#+begin_src emacs-lisp
(use-package nodejs-repl
  :config
  ;; (defun nvm-which ()
  ;;   (let* ((shell (concat (getenv "SHELL") " -l -c 'nvm which'"))
  ;;          (output (shell-command-to-string shell)))
  ;;     (cadr (split-string output "[\n]+" t))))
  (setq nodejs-repl-command "node"))
#+end_src

*** nvm

#+begin_src emacs-lisp
(use-package nvm)
#+end_src

*** COMMENT js-comint
https://github.com/redguardtoo/js-comint
#+begin_src emacs-lisp :lexical no
(use-package js-comint
  :config
  (js-do-use-nvm)
  ;; Remap Elisp's eval-last-sexp (C-x C-e) to eval JavaScript
  (define-key js-mode-map [remap eval-last-sexp] #'js-comint-send-last-sexp)
  (define-key js-mode-map (kbd "C-c C-l") 'js-send-buffer))

(defun inferior-js-mode-hook-setup ()
  (add-hook 'comint-output-filter-functions 'js-comint-process-output))
(add-hook 'inferior-js-mode-hook 'inferior-js-mode-hook-setup t)
#+end_src

*** COMMENT skewer-mode
https://github.com/skeeto/skewer-mode

#+begin_src emacs-lisp :lexical no
(use-package skewer-mode
  :hook ((js2-mode . skewer-mode)))
#+end_src

** COMMENT Perl
*** cperl-mode
https://github.com/jrockway/cperl-mode
Install =perl= in your OS

#+begin_src emacs-lisp :lexical no
(use-package cperl-mode
  :config
;;; cperl-mode is preferred to perl-mode
;;; "Brevity is the soul of wit" <foo at acm.org>
  (defalias 'perl-mode 'cperl-mode)
  (setq cperl-font-lock t
        cperl-electric-lbrace-space t
        cperl-electric-parens t
        cperl-electric-linefeed t
        cperl-info-on-command-no-prompt t
        cperl-clobber-lisp-bindings t
        cperl-lazy-help-time t))
#+end_src

*** company-plsense
https://github.com/CeleritasCelery/company-plsense
Install =plsense= in your OS.

#+begin_src emacs-lisp :lexical no
(use-package company-plsense
  :config
  (add-to-list 'company-backends 'company-plsense)
  (add-hook 'perl-mode-hook 'company-mode)
  (add-hook 'cperl-mode-hook 'company-mode))
#+end_src

*** COMMENT helm-perldoc
https://github.com/emacsorphanage/helm-perldoc
- helm-perldoc :: Search module and do action.
- helm-perldoc:setup :: Update module list for viewing documenations.
- helm-perldoc:carton-setup :: Update module list based Carton. Local library path is decided on helm-perldoc:default-carton-path.
- helm-perldoc:history :: Search modules which is already searched

Install [[https://github.com/perl-carton/carton][carton]].  
#+begin_src emacs-lisp :lexical no
(use-package helm-perldoc)
#+end_src

*** emacs-pde
https://metacpan.org/pod/Emacs::PDE

  #+begin_src emacs-lisp :lexical no
  (add-to-list 'load-path "~/.emacs.d/manual/emacs-pde/lisp/")
  (load "pde-load" t)
  #+end_src

*** COMMENT perlbrew
https://github.com/kentaro/perlbrew.el
Install =perlbrew= in your OS using CPAN

#+begin_src emacs-lisp :lexical no
(use-package perlbrew
  :config
  ;; initialize perl version to use
  (perlbrew-switch "perl-5.12.3"))
#+end_src

*** COMMENT perl-quote
http://user42.tuxfamily.org/perl-quote/index.html

#+begin_src emacs-lisp :lexical no
(use-package perl-quote)
#+end_src

*** ffap-perl-module
http://user42.tuxfamily.org/ffap-perl-module/index.html

#+begin_src emacs-lisp :lexical no
(use-package ffap-perl-module)
#+end_src

*** man-completion
http://user42.tuxfamily.org/man-completion/index.html
 man-completion.el sets up page name completion for Emacs M-x man, getting available page names from the man -k "apropos" database, and completing bare filenames too.

A hook scheme lets you manipulate the page name picked out as the default. A Perl module function is included which can expand an abbreviation or prune a subpackage or variable name to get to the right page. It's particularly good for POE and perlcritic names.

#+begin_src emacs-lisp :lexical no
(use-package man-completion)
#+end_src

** COMMENT Octave
https://wiki.octave.org/Emacs
- Babel :: https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-octave-matlab.html

#+begin_src emacs-lisp
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))
  ;; (use-package gnuserv)
  ;; (autoload 'octave-help "octave-hlp" nil t)
  ;; (require 'gnuserv)
  ;; (gnuserv-start)
#+end_src

** COMMENT Maxima
*** maxima
See https://sites.google.com/site/imaximaimath/download-and-install

Using =tllocalmgr= install: (already in =texlive-most=)
-  breqn, which enables automatic line-breaking in displayed equations;
- mathtools, providing a range of extensions to maths as a whole; and 

#+begin_src emacs-lisp
  ;; (use-package maxima
  ;; :mode ("\\.ma[cx]\\'" . maxima-mode))
  ;;(add-to-list 'load-path "/home/nabeel/.guix-profile/share/emacs/site-lisp/")
  (autoload 'maxima-mode "maxima" "Maxima mode" t)
  (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
  (autoload 'maxima "maxima" "Maxima interaction" t)
  (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
  (setq imaxima-use-maxima-mode-flag nil)
  (setq imaxima-print-tex-command "latex %s; dvips -o imax.ps %s; gv imax.ps") ;; had to install =gv=

  ;; (setq imaxima-latex-use-packages
  ;;       "\\usepackage{verbatim}
  ;; \\usepackage{pagecolor}
  ;; \\usepackage{color}
  ;; \\usepackage{exscale}
  ;; \\usepackage{amsmath}
  ;; \\usepackage[cmbase]{flexisym}
  ;; \\usepackage{breqn}
  ;; \\setkeys{breqn}{compact}
  ;; ")
#+end_src

*** company-maxima

#+begin_src emacs-lisp
  (use-package company-maxima
    :after company
    :config
    (add-to-list 'company-backends '(company-maxima-symbols company-maxima-libraries)))
#+end_src
    
** COMMENT Julia
*** julia-mode

#+begin_src emacs-lisp
  (use-package julia-mode)
#+end_src
    
*** julia-repl

#+begin_src emacs-lisp
  (use-package julia-repl
    :hook (julia-mode . julia-repl-mode)
    :config
    (julia-repl-set-terminal-backend 'vterm))
#+end_src
    
*** julia-vterm

#+begin_src emacs-lisp
  (use-package julia-vterm)
#+end_src
    
*** ob-julia-vterm
- Also install =Suppressor.jl= in Julia environment

#+begin_src emacs-lisp
  (use-package ob-julia-vterm)
#+end_src

*** lsp-julia
https://github.com/non-Jedi/lsp-julia

#+begin_src emacs-lisp
  (use-package lsp-julia
    :hook ((julia-mode . lsp-deferred))
    :init
    ;; (setq lsp-julia-package-dir nil)
    ;; (setq-default lsp-julia-flags '("--project=/home/nabeel/.julia/packages/LanguageServer/"))
    ;; :config
    ;; (setq lsp-julia-default-environment "~/.julia/environments/v1.6")
    )
#+end_src
    
*** COMMENT eglot-jl
https://github.com/non-Jedi/eglot-jl

#+begin_src emacs-lisp
  (use-package eglot-jl
    :init
    (eglot-jl-init))
#+end_src
    
** Python
**** pet
https://github.com/wyuenho/emacs-pet

If you need to configure a package that pet doesn't support, or only want to configure a couple of packages instead of all of the supported ones, pet offers 2 autoloaded functions to help you find the correct path to the executable and virtualenv directory:

    (pet-executable-find EXECUTABLE)
    (pet-virtualenv-root)

#+begin_src emacs-lisp :lexical no
(use-package pet
  :config
  (add-hook 'python-base-mode-hook 'pet-mode -10))
#+end_src

**** python

#+begin_src emacs-lisp :lexical no
(use-package python-mode
  :mode ("[./]flake8\\'" . conf-mode)
  :mode ("/Pipfile\\'" . conf-mode)
  :config
  (add-to-list 'exec-path "/home/nabeel/.local/bin"))


;; (add-hook 'python-mode-hook 'eglot-ensure)
;; (add-to-list 'eglot-server-programs '(foo-mode . ("foo-language-server" "--args")))
;; (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio")))

#+end_src

**** COMMENT anaconda-mode
Either use this or =eglot=
https://github.com/pythonic-emacs/anaconda-mode/tree/master

To use this package you need to install =setuptools=.

#+begin_src emacs-lisp :lexical no
;; Keybinding 	Description
;; C-M-i 	anaconda-mode-complete
;; M-. 	anaconda-mode-find-definitions
;; C-x 4 . 	anaconda-mode-find-definitions-other-window
;; C-x 5 . 	anaconda-mode-find-definitions-other-frame
;; M-= 	anaconda-mode-find-assignments
;; C-x 4 = 	anaconda-mode-find-assignments-other-window
;; C-x 5 = 	anaconda-mode-find-assignments-other-frame
;; M-r 	anaconda-mode-find-references
;; C-x 4 r 	anaconda-mode-find-references-other-window
;; C-x 5 r 	anaconda-mode-find-references-other-frame
;; M-, 	xref-pop-marker-stack
;; M-? 	anaconda-mode-show-doc

(use-package anaconda-mode
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode))
  :bind (("C-c C-d" . anaconda-mode-show-doc)))

(use-package company-anaconda
  :config
  (eval-after-load "company"
    '(add-to-list 'company-backends 'company-anaconda)))
#+end_src

**** lpy
https://github.com/abo-abo/lpy/tree/master

#+begin_src emacs-lisp :lexical no
(use-package lpy
  :after counsel
  ;; :hook ((python-mode . lpy-mode))
  :bind (:map lpy-mode-map
              ("M-." . nil)
              ("E" . lispy-eval-and-comment)))
#+end_src

**** COMMENT pyimport
https://github.com/Wilfred/pyimport

Requires =pyflakes= to be installed.

Run =M-x pyimport-remove-unused=.
This requires pyflakes to be on PATH. Alternatively, set =pyimport-pyflakes-path=.

Place point on the missing variable, then run M-x pyimport-insert-missing.
This assumes that you have another Python buffer that contains an example of importing the variable.
I like to bind this to a key:
~(define-key python-mode-map (kbd "C-c C-i") #'pyimport-insert-missing)~

#+begin_src emacs-lisp :lexical no
(use-package pyimport)
#+end_src

**** COMMENT py-isort
https://github.com/paetzke/py-isort.el/tree/master

Install =isort=

#+begin_src emacs-lisp :lexical no
(use-package py-isort)
;; py-isort-buffer
;; py-isort-region
#+end_src

**** COMMENT python-pytest
https://github.com/wbolster/emacs-python-pytest

popup menu, named =python-pytest-dispatch=.

#+begin_src emacs-lisp :lexical no
(use-package python-pytest)
#+end_src

**** COMMENT pyvenv
https://github.com/jorgenschaefer/pyvenv/tree/master

This is a simple global minor mode which will replicate the changes done by virtualenv activation inside Emacs.

The main entry points are =pyvenv-activate=, which queries the user for a virtual environment directory to activate, and =pyvenv-workon=, which queries for a virtual environment in $WORKON_HOME (from virtualenvwrapper.sh).

#+begin_src emacs-lisp :lexical no
(use-package pyvenv)
#+end_src

**** COMMENT pipenv
https://github.com/pwalsh/pipenv.el/tree/master
A Pipenv porcelain inside Emacs.

pipenv.el relies on pyvenv to switch between different virtual environments (pipenv-activate and pipenv-deactivate).

#+begin_src emacs-lisp :lexical no
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended))
#+end_src

**** COMMENT pyenv-mode
https://github.com/pythonic-emacs/pyenv-mode/tree/master
Add following block to your Emacs configuration:
(pyenv-mode)

Now you can specify the pyenv Python version:
M-x pyenv-mode-set

So now when you run inferior Python with:
M-x run-python

The process will start inside the specified Python installation. You can unset the current version with:
M-x pyenv-mode-unset



#+begin_src emacs-lisp :lexical no
  (use-package pyenv-mode
    :config
    (require 'pyenv-mode))

  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))

  (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
#+end_src

**** COMMENT live-py-mode
https://github.com/donkirkby/live-py-plugin/tree/master
https://donkirkby.github.io/live-py-plugin/starting_emacs.html

=M-x live-py-mode=

#+begin_src emacs-lisp :lexical no
(use-package live-py-mode)
#+end_src

**** COMMENT pippel
https://github.com/arifer612/pippel/tree/master
Emacs frontend to python package manager pip 

#+begin_src emacs-lisp :lexical no
;; To use it call M-x pippel-list-packages.

;; Shortcuts for pippel-package-menu-mode buffers:

;; m pippel-menu-mark-unmark remove mark
;; d pippel-menu-mark-delete mark for deletion
;; U pippel-menu-mark-all-upgrades mark all upgradable
;; u pippel-menu-mark-upgrade mark for upgrade
;; r pippel-list-packages refresh package list
;; i pippel-install-package prompt user for packages
;; x pippel-menu-execute perform marked package menu actions
;; RET pippel-menu-visit-homepage follow link

(use-package pippel)
#+end_src

**** COMMENT yapfify

~$ guix install yapf~

#+begin_src emacs-lisp :lexical no
(use-package yapfify
  :hook ((python-mode . yapf-mode)))
#+end_src

**** COMMENT python-cell
https://github.com/thisch/python-cell.el

#+begin_src emacs-lisp :lexical no
(use-package python-cell)
#+end_src

** Shell
*** shellcheck
https://github.com/federicotdn/flymake-shellcheck

#+begin_src emacs-lisp :lexical no
(use-package flymake-shellcheck
  :commands flymake-shellcheck-load
  :init
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
#+end_src

** COMMENT Jupyter 

*** Prerequisites

#+begin_src emacs-lisp
  (use-package zmq
    ;; :elpaca nil
    :ensure t
    )

  (use-package websocket
    ;; :elpaca nil
    :ensure t
    )

  (use-package web-server
    ;; :elpaca nil
    :ensure t
    )
n
  (use-package simple-httpd
    ;; :elpaca nil
    :ensure t
    )
#+end_src
    
*** Jupyter
    
#+begin_src emacs-lisp
  (use-package jupyter
    ;; :elpaca (:no-native-compile t)
    ;; :elpaca nil
    :ensure t
    :bind (:map org-mode-map
                ("C-j" . jupyter-org-hydra/body))
    :config
    (setq jupyter-eval-use-overlays t))
#+end_src
    
*** ein
https://github.com/millejoh/emacs-ipython-notebook#ob-ein

#+begin_src emacs-lisp
  (use-package ein
    :config
    (setq inferior-julia-program-name "/usr/bin/julia"
          ein:output-area-inlined-images t
          ein:completion-backend 'ein:use-company-backend))
#+end_src


*** ob-ipython
https://github.com/gregsexton/ob-ipython/tree/master

An Emacs library that allows Org mode to evaluate code blocks using a Jupyter kernel (Python by default).

#+begin_src emacs-lisp :lexical no
(use-package ob-ipython
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ipython . t)
     ;; other languages..
     )))
#+end_src
** COMMENT Localization and Internationalization
*** po-mode

#+begin_src emacs-lisp :lexical no
  (use-package po-mode
    :ensure t
    :config
    (setq auto-mode-alist (cons '("\\.po\\'\\|\\.po\\." . po-mode)
                                auto-mode-alist)))

#+end_src
    
* Org
** Basic

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :hook ((org-mode . variable-pitch-mode)
         (org-mode . org-indent-mode))
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         :map org-mode-map
         ("C-c C-'" . org-babel-demarcate-block)
         ("C-<print>" . org-screenshot-take)
         ("C-c C-x C-v" . nbl/org-toggle-inline-images))
  :config
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-hide-emphasis-markers t
        org-return-follows-link t
        org-export-dispatch-use-expert-ui nil
        ;; prettify
        org-use-sub-superscripts "{}"
        org-edit-src-content-indentation 0
        org-use-speed-commands t
        ;; org links
        org-link-keep-stored-after-insertion t
        help-at-pt-display-when-idle t)
  (help-at-pt-set-timer)
  ;; download images if their link is provided in org link form
  (set org-display-remote-inline-images 'download))

;; C-c C-c also refreshes org-inline-image

(defun shk-fix-inline-images ()
  (when org-inline-image-overlays
    (org-redisplay-inline-images)))

;; https://emacs.stackexchange.com/questions/44664/apply-ansi-color-escape-sequences-for-org-babel-results
(defun ek/babel-ansi ()
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))

(with-eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

#+begin_src emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (sqlite . t)
   (python . t)
   (java . t)
   (C . t)
   (lisp . t)
   (emacs-lisp . t)
   (octave . t)
   (maxima . t)
   (shell . t)
   ;;(julia . t)
   ;; (julia-vterm . t)
   ;;(ein . t)
   ;;(jupyter . t)
   ))

(setq org-babel-lisp-eval-fn 'sly-eval)
(setq org-babel-python-command "python3")
#+end_src

 
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("cp" . "src C++ :results output"))
  (add-to-list 'org-structure-template-alist '("oc" . "src octave :results output"))
  ;;(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("jl" . "src julia"))
  (add-to-list 'org-structure-template-alist '("ll" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("ej" . "src ein-julia :results output"))
  (add-to-list 'org-structure-template-alist '("jj" . "src jupyter-julia"))

  (setq org-babel-default-header-args:jupyter-julia
        '((:async . "yes")
          (:session . "jl")
          (:kernel . "julia-1.6")
          ;;(:display . "text/plain  text/org text/html text/markdown text/latex image/svg+xml image/png image/jpeg ")
          ))
  (setq org-babel-default-header-args:C++
        '((:namespaces . "std")
          (:includes   . "<iostream> <algorithm> <vector> <string> <list>")))
  ;; is 'julia' block refers to 'jupyter-julia' block
  ;; (org-babel-jupyter-override-src-block "julia")

  (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)



#+end_src

** Academic writing
*** latex setup

#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(native)
        org-pretty-entities-include-sub-superscripts nil
        org-format-latex-options '(:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                                               ("begin" "$1" "$" "$$" "\\(" "\\[")))
  (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
  (setq org-latex-compiler "xelatex")
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted")
                                   ("" "tikz" t))
        ;; stop org adding hypersetup{author..} to latex export
        org-latex-with-hyperref nil)

  (setq org-latex-pdf-process
        '("%latex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "%latex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
          "%latex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"))

  ;; (add-to-list 'org-latex-packages-alist
  ;; '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

  ;; deleted unwanted file extensions after latexMK
  (setq org-latex-logfiles-extensions
        '("lof" "lot" "tex~" "aux" "idx" "log"
          "out" "toc" "nav" "snm" "vrb" "dvi"
          "fdb_latexmk" "blg" "brf" "fls" "entoc"
          "ps" "spl" "bbl" "xmpi" "run.xml" "bcf"
          "acn" "acr" "alg" "glg" "gls" "ist"))
#+end_src

#+begin_src emacs-lisp
  ;; (unless (boundp 'org-latex-classes)
  ;;   (setq org-latex-classes nil))
  ;; (add-to-list 'org-latex-classes
  ;;              '("article"
  ;;                "\\documentclass{article}"
  ;;                ("\\section{%s}" . "\\section*{%s}")))
#+end_src

#+begin_src emacs-lisp
  ;; (setq org-preview-latex-default-process 'dvipng)
  ;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))

  ;; (setq org-preview-latex-process-alist
  ;;       '((dvipng :programs
  ;;                 ("latex" "dvipng")
  ;;                 :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
  ;;                 (1.0 . 1.0)
  ;;                 :latex-compiler
  ;;                 ("latex -interaction nonstopmode -output-directory %o %f")
  ;;                 :image-converter
  ;;                 ("dvipng -D %D -T tight -o %O %f"))
  ;;         (dvisvgm :programs
  ;;                  ("latex" "dvisvgm")
  ;;                  :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
  ;;                  (1.7 . 1.5)
  ;;                  :latex-compiler
  ;;                  ("latex -interaction nonstopmode -output-directory %o %f")
  ;;                  :image-converter
  ;;                  ("dvisvgm %f -n -b min -c %S -o %O"))
  ;;         (imagemagick :programs
  ;;                      ("latex" "convert")
  ;;                      :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :image-input-type "pdf" :image-output-type "png" :image-size-adjust
  ;;                      (1.0 . 1.0)
  ;;                      :latex-compiler
  ;;                      ("pdflatex -interaction nonstopmode -output-directory %o %f")
  ;;                      :image-converter
  ;;                      ("convert -density %D -trim -antialias %f -quality 100 %O"))))
#+end_src

*** COMMENT texfrag
https://github.com/TobiasZawada/texfrag
previewing LaTeX fragments such as in doxygen comments. Other use-cases are MathJax snippets in html pages and LaTeX equations in stackexchange questions.


#+begin_src emacs-lisp
(use-package texfrag
  :when (require 'auctex nil :no-error)
  :bind ((:map texfrag-mode-map
               ("C-c C-p" . org-previous-visible-heading)))
  :config
  (setq-default texfrag-scale 0.7
                texfrag-preview-buffer-at-start nil))
#+end_src

*** cdlatex

#+begin_src emacs-lisp
  (use-package cdlatex
    :bind (:map org-mode-map
                ("C-c e" . cdlatex-environment))
    :hook ((org-mode . org-cdlatex-mode))
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
    (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
    (setq cdlatex-auto-help-delay 1.5
          cdlatex-simplify-sub-super-scripts nil
          cdlatex-make-sub-superscript-roman-if-pressed-twice t
          cdlatex-use-dollar-to-ensure-math nil)

    (setq cdlatex-env-alist
          '(("tikzpicture"
             "\\begin{tikzpicture}
  ?
  \\end{tikzpicture}" nil))))
#+end_src

*** Auctex

#+begin_src emacs-lisp :lexical yes
  (when guix? 
    (let* ((texlive-path (or (car (last (split-string
					 (shell-command-to-string
					  "guix package -I texlive"))))
			     (error "install 'texlive' using 'guix install texlive'")))
	   (texlive-bin (concat texlive-path "/bin")))
      (cl-pushnew texlive-bin exec-path)
      texlive-bin))

  (use-package auctex
    :ensure nil ;; installed via Guix (emacs-auctex)
    ;; :ensure (auctex :repo "https://git.savannah.gnu.org/git/auctex.git" :branch "main"
    ;; 		  :pre-build (("make" "elpa"))
    ;; 		  :build (:not elpaca--compile-info) ;; Make will take care of this step
    ;; 		  :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
    ;; 		  :version (lambda (_) (require 'tex-site) AUCTeX-version))
    ;; :elpaca  (auctex
    ;;           :pre-build (("./autogen.sh")
    ;;                       ("./configure"
    ;;                        "--without-texmf-dir"
    ;;                        "--with-packagelispdir=./"
    ;;                        "--with-packagedatadir=./")
    ;;                       ("make"))
    ;;           :build (:not elpaca--compile-info) ;; Make will take care of this step
    ;;           :files ("*.el" "doc/*.info*" "etc" "images" "latex" "style")
    ;;           :version (lambda (_) (require 'tex-site) AUCTeX-version))
    ;; :mode (("\\.tex\\'" . LaTeX-mode))
    :config
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))


#+end_src

*** org-ref

#+begin_src emacs-lisp
  (use-package org-ref
    :bind (:map org-mode-map
                ("C-c ]" . org-ref-insert-cite-link)))

  (require 'reftex)

  (setq reftex-default-bibliography "~/zotero.bib")

  (setq org-ref-default-bibliography "~/zotero.bib")
#+end_src

*** ox-pandoc
https://github.com/kawabata/ox-pandoc

#+begin_src emacs-lisp
  (use-package ox-pandoc)
#+end_src

*** COMMENT ox-extra

#+begin_src emacs-lisp
  (require 'ox-extra)

  (ox-extras-activate '(latex-headers-blocks
                        ignore-headlines))
#+end_src

*** company-math

#+begin_src emacs-lisp
  (use-package company-math
    :after company
    :config
    (setq company-tooltip-align-annotations t)
    (add-to-list 'company-backends 'company-math-symbols-unicode)
    (add-to-list 'company-backends 'company-math-symbols-latex))
#+end_src

*** company-org-block

#+begin_src emacs-lisp 
  (use-package company-org-block
    :after company
    :config
    (add-to-list 'company-backends 'company-org-block)
    (setq company-org-block-edit-style 'inline))
#+end_src

*** unicode-math-input
Activate with =C-u C-\ unicode-math RET=. Then TeX commands (e.g., \alpha) are replaced automatically as you type with the corresponding Unicode character.
 
#+begin_src emacs-lisp
  (use-package unicode-math-input)
#+end_src

*** org-fragtog

#+begin_src emacs-lisp 
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
#+end_src

*** COMMENT org-edit-latex
https://github.com/et2010/org-edit-latex/tree/1f228310ef2f3f2959a527f6d99e42ce977384c8
#+begin_src emacs-lisp 
  (use-package org-edit-latex
    :hook (q))
#+end_src

*** COMMENT xenops
https://github.com/dandavison/xenops

#+begin_src emacs-lisp 
  (use-package xenops
    :hook (org-mode . xenops-mode)
    :config
    (setq xenops-reveal-on-entry t
          xenops-math-image-scale-factor 	1.6
          )
    (defun xenops-handle-paste ()
      "Handle a paste event, if the clipboard data contain an element that Xenops can paste."
      (interactive)
      (or (xenops-math-handle-paste)))
    ) 
#+end_src

*** easy draw
https://github.com/misohena/el-easydraw

Just do a [[edraw:]] and plus enter on it. (SVG data will be embedded inside org file, though you can also define a normal path.)

For eg:  [[edraw:data=H4sIACJndWYAA3WQ3U7EIBCFX4WM1y10dzXppvRK38AXwPKbUtgALq1P77Qa44VmGAiZfHNOzpDvhlQni+Xw+MSAWOWMLRwuJ/ysiw+Zgy3ldqW01trWcxuToSfGGEUUyF2l7GLg0LXdN3BdvQvzX1jX9z09pjAOSU2FrBxQZzvuf204yUHJJGrzJqbZpPgeJJBcUpwVhxCDAqKd9xwetNZA6DiY31CUG+oVtRaiYyhNdh/IndkP1bG94GuqxeI8Osoi5Car5HDjzjYiTDYmDouT0qvDdcf2lPC9MBhfrcsEz4vIG3lG5YHu3DhQg41pjZ/uhnZsbgEAAA==][This embedded svg has some text inside it.]] 

- To toggle the inline display mode, type =M-x edraw-org-link-image-mode=
- To edit the image, do one of the following on the link:
  - M-x edraw-org-edit-link
  - C-c C-o
  - Right click on image (The right-click menu also provides some
    other useful functions for links)

#+begin_src emacs-lisp :lexical no
(use-package edraw-org
  :after org
  :ensure (:host github :repo "misohena/el-easydraw")
  :config
  (edraw-org-setup-default)
  ;; When using the org-export-in-background option (when using the
  ;; asynchronous export function), the following settings are
  ;; required. This is because Emacs started in a separate process does
  ;; not load org.el but only ox.el.
  (with-eval-after-load "ox"
    (require 'edraw-org)
    (edraw-org-setup-exporter)))

#+end_src

** COMMENT org-drill
https://gitlab.com/phillord/org-drill

#+begin_src emacs-lisp
(use-package org-drill)
#+end_src

** org-roam
https://www.orgroam.com/manual.html#Installation

Install =sqlite3= on the system
install
#+begin_src emacs-lisp
(make-directory "~/org/roam" :parents)
#+end_src
#+begin_src emacs-lisp
  (use-package org-roam
    :demand t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org/roam/"))
    :config
    (org-roam-db-autosync-mode 1))
#+end_src

** Other packages
*** org-contrib

#+begin_src emacs-lisp
  (use-package org-contrib
    :after org)
#+end_src

*** org-auto-tangle

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode)) 
#+end_src

*** org-superstar and font settings

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-remove-leading-stars t))


  ;; Replace list hyphen with dot
  ;; (font-lock-add-keywords 'org-mode
  ;;                         '(("^ *\\([-]\\) "
  ;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :font "Fira Code" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.4)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.25)
                  (org-level-4 . 1.2)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Fira Code" :weight 'medium :height (cdr face)))


  ;; (let* ((variable-tuple
  ;; 	  (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
  ;; 		((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;; 		((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;; 		((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;; 		((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;; 		(nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;; 	 (base-font-color     (face-foreground 'default nil 'default))
  ;; 	 (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;     (custom-theme-set-faces
  ;;      'user
  ;;      `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;      `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;      `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;;      `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
  ;;      `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  ;; Make sure org-indent face is available
  ;; (require 'org-indent)

  ;; ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  ;;   (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  ;;   (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  ;;   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; ;; Get rid of the background on column views
  ;;   (set-face-attribute 'org-column nil :background nil)
  ;;   (set-face-attribute 'org-column-title nil :background nil)

  ;; todo: Others to consider
  ;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
  ;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;; '(org-property-value ((t (:inherit fixed-pitch))) t)
  ;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
  ;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
  ;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
  ;; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+end_src

#+RESULTS:

*** org-appear
auto-toggle org elements

#+begin_src emacs-lisp
(use-package org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoentities t
        org-appear-autolinks nil
        org-appear-autosubmarkers t)
  (format "hello"))
#+end_src

*** org-download
https://github.com/abo-abo/org-download

If you have the image stored in the clipboard, use =org-download-clipboard=.
- need =xclip= program .

#+begin_src emacs-lisp
(use-package org-download
  :after org
  :bind (:map org-mode-map
              ("C-M-y" . org-download-clipboard))
  :config
  (setq org-download-display-inline-images nil
        ;; to not insert the #+DOWNLOADED ... stuff
        org-download-annotate-function #'(lambda (link) (format ""))
        org-download-screenshot-method "flameshot gui")

  (setq-default org-download-image-dir "./images")
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

*** org-gfm
https://github.com/larstvei/ox-gfm
Github Flavored Markdown exporter for Org Mode

#+begin_src emacs-lisp :lexical no
(use-package ox-gfm)
#+end_src

*** org-transclusion
https://github.com/nobiot/org-transclusion

- transclude src block with custom search string and lines :
#+transclude: [[file:~/Documents/leetcode/books/lisp/sicp/code/ch1/test.rkt::f 4]] :lines 1-2 :src racket

#+begin_src emacs-lisp
(use-package org-transclusion
  :bind (("<f12>" . org-transclusion-add)
         (:map org-transclusion-map
               ("<f12>". org-transclusion-remove)))
  :config
  (set-face-attribute
   'org-transclusion-fringe nil
   :foreground "white smoke"
   :background "white smoke"))
#+end_src

*** org-pandoc-import
https://github.com/tecosaur/org-pandoc-import

#+begin_src emacs-lisp
  (use-package org-pandoc-import
    :ensure (:host github
             :repo "tecosaur/org-pandoc-import"
             :files ("*.el" "filters" "preprocessors"))
    :after org
    :config
    (org-pandoc-import-transient-mode -1))
#+end_src

*** org-sticky-header

https://github.com/alphapapa/org-sticky-header

#+begin_src emacs-lisp
  (use-package org-sticky-header
    :hook (org-mode . org-sticky-header-mode)
    :config
    (setq org-sticky-header-full-path 'reversed))
#+end_src

*** orglink
https://github.com/tarsius/orglink

#+begin_src emacs-lisp :lexical no

#+end_src

*** COMMENT org-noter
https://github.com/weirdNox/org-noter

#+begin_src emacs-lisp
  (use-package org-noter
    :after org
    :config
    (setq org-noter-always-create-frame nil
          org-noter-separate-notes-from-heading t
          org-noter-doc-property-in-notes t
          org-noter-auto-save-last-location1 t))
#+end_src

*** org-pdftools
a custom org link type for pdf-tools
https://github.com/fuxialexander/org-pdftools

#+begin_src emacs-lisp
(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))
#+end_src

*** COMMENT org-noter-pdftools

#+begin_src emacs-lisp
  (use-package org-noter-pdftools
    :after org-noter
    :config
    ;; Add a function to ensure precise note is inserted
    (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
      (interactive "P")
      (org-noter--with-valid-session
       (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                     (not org-noter-insert-note-no-questions)
                                                   org-noter-insert-note-no-questions))
             (org-pdftools-use-isearch-link t)
             (org-pdftools-use-freestyle-annot t))
         (org-noter-insert-note (org-noter--get-precise-info)))))

    ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
    (defun org-noter-set-start-location (&optional arg)
      "When opening a session with this document, go to the current location.
  With a prefix ARG, remove start location."
      (interactive "P")
      (org-noter--with-valid-session
       (let ((inhibit-read-only t)
             (ast (org-noter--parse-root))
             (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
         (with-current-buffer (org-noter--session-notes-buffer session)
           (org-with-wide-buffer
            (goto-char (org-element-property :begin ast))
            (if arg
                (org-entry-delete nil org-noter-property-note-location)
              (org-entry-put nil org-noter-property-note-location
                             (org-noter--pretty-print-location location))))))))
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

*** org-web-tools
https://github.com/alphapapa/org-web-tools


- org-web-tools-insert-link-for-url: Insert an Org-mode link to the URL in the clipboard or kill-ring. Downloads the page to get the HTML title.
- org-web-tools-insert-web-page-as-entry: Insert the web page for the URL in the clipboard or kill-ring as an Org-mode entry, as a sibling heading of the current entry.
- org-web-tools-read-url-as-org: Display the web page for the URL in the clipboard or kill-ring as Org-mode text in a new buffer, processed with eww-readable.
- org-web-tools-convert-links-to-page-entries: Convert all URLs and Org links in current Org entry to Org headings, each containing the web page content of that URL, converted to Org-mode text and processed with eww-readable. This should be called on an entry that solely contains a list of URLs or links.
- org-web-tools-archive-attach: Download archive of page at URL and attach with org-attach. If CHOOSE-FN is non-nil (interactively, with universal prefix), prompt for the archive function to use. If VIEW is non-nil (interactively, with two universal prefixes), view the archive immediately after attaching. (See also org-board).
- org-web-tools-archive-view: Open Zip file archive of web page. Extracts to a temp directory and opens with browse-url-default-browser. Note: the extracted files are left on-disk in the temp directory.


#+begin_src emacs-lisp
  (use-package org-web-tools)
#+end_src

*** COMMENT org-tree-slide
https://github.com/takaxp/org-tree-slide

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :after org
    :bind (:map org-mode-map
                ("C-u <f5>" . org-tree-slide-skip-done-toggle)
                ("<f5>" . org-tree-slide-mode)
                :map org-tree-slide-mode-map
                ("C-x s h" . org-tree-slide-display-header-toggle)
                )
    :config
    (setq org-tree-slide-skip-done t)
    (org-tree-slide-simple-profile))
#+end_src

*** COMMENT org-reveal
https://github.com/yjwen/org-reveal/
Install:
- =nodejs=
- =npm=

#+begin_src shell
cd ~/.emacs.d/manual/
git clone https://github.com/hakimel/reveal.js.git
#+end_src

#+begin_src shell
cd ~/.emacs.d/manual/reveal.js/
npm install
#+end_src

#+begin_src emacs-lisp :lexical no
(use-package ox-reveal
  :config
  (setq org-reveal-root (concat "file://"
                                (getenv "HOME")
                                "/.emacs.d/manual/reveal.js")
        org-reveal-hlevel 1
        ;; to make src blocks executable
        org-reveal-klipsify-src nil))
#+end_src

*** COMMENT anki-editor
https://github.com/louietan/anki-editor
Requirements
- anki-connect, an Anki add-on required by this package to interact with Anki.
- curl


#+begin_src emacs-lisp :lexical no
(use-package anki-editor)
#+end_src

* Finally

#+begin_src emacs-lisp :lexical no
(toggle-debug-on-error -1)
#+end_src

* Learn
** Global keybinding in emacs
Use the =bind-key*= function provided by =use-package=

** best-features-for-text-editing-in-emacs
https://tech.toryanderson.com/2021/02/27/best-features-for-text-editing-in-emacs/#built-in
- C-t transpose-chars and its companion M-t transpose word
- C-x i (insert-file) to stick stuff straight into my document
- M-q (fill-paragraph) since my “paragraphs” have unlimited line length, this removes line breaks
- M-/ (dabbrev-expand) which replaces the word at point with the nearest thing in some open buffer. Repeating it cycles through replacement options. Great as a super-quick spell-check or completion when you’ve just started some annoyingly long word. Great for code variables as well as natural language prefixes.
  - Use =hippie-expand= instead.
    https://www.masteringemacs.org/article/text-expansion-hippie-expand
- ispell and its family for spell-checking, which can be super-powered by extra libs
- Multiple kill-ring, meaning you can copy three chunks of text from somewhere and paste them in the places you want, instead of having to go back to copy the second, then paste, then third, then paste, you’ve got it all in one go. I frequently wish for a kill ring when I’m in my browser or libre calc.
- replace-regexp which, along with plain old regexp replacement, lets you replace with the results of a function. I’ve used this to implement transliterations, to fix mis-sectioned documents when line-breaks were mistaken for new sections, etc.
- word casing with M-l downcase-dwim, M-c capitalize-dwim, and M-u upcase-dwim
- Registers, which can contain points, words, or other things that you might want to paste in at some unknown time in the future, some undefined number of times
- follow-mode so that in two columns I can span twice the vertical length and paging up/down one moves the other to stay in line.
- clone-indirect-buffer makes a copy of a section of a buffer which can take buffer-state changes that won’t effect the whole buffer (e.g. text-size, collapsed content, highlights) without effecting the main buffer view, while content changes will be visible in both places.
- Indentation-control. Select some lines, then do C-x TAB (indent-rigidly)and press left/right until your spacing is what you want.
- just-one-space, included in simple.el with emacs: press once to remove all but one space at cursor spot; twice two remove all at once, three times to start over.

** other people's configuration
- https://gitlab.com/skybert/my-little-friends/blob/master/emacs/.emacs#L780 ::
  - for his Java configuration
  - git-gutter

** How to unarchive files painlessly
*** atool
https://www.nongnu.org/atool/

+ The main command is =aunpack= which extracts files from an archive.
  Did you ever extract files from an archive, not checking whether the files were located in a subdirectory or in the top directory of the archive, resulting in files scattered all over the place? aunpack overcomes this pr     oblem by first extracting to a new directory. If there was only a single file in the archive, that file is moved to the original directory. =aunpack= also prevents local files from being overwritten by mistake.

+ The other commands provided are =apack= (to create archives),

+ =als= (to list files in archives), and

+ =acat= (to extract files to standard out).

+ NOTE :: As atool invokes external programs to handle the archives, not all commands may be supported for a certain type of archives.

The other commands provided are apack (to create archives), als (to list files in archives), and acat (to extract files to standard out). As atool invokes external programs to handle the archives, not all commands may be supported for a certain type of archives.
- atool [OPTION]... ARCHIVE [FILE]...
- aunpack [OPTION]... ARCHIVE [FILE]...
- apack [OPTION]... ARCHIVE [FILE]...
- als [OPTION]... ARCHIVE [FILE]...
- acat [OPTION]... ARCHIVE [FILE]...
- adiff [OPTION]... ARCHIVE ARCHIVE
- arepack [OPTION]... OLD-ARCHIVE NEW-ARCHIVE
